//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nziebart/Documents/MusFingering/com/aqwertian/fingering/MusPlayFile.java
//
//  Created by nziebart on 10/23/12.
//

#import "IOSObjectArray.h"
#import "MusPlayFile.h"
#import "MusicFile.h"
#import "StringTokenizer.h"
#import "java/io/BufferedReader.h"
#import "java/io/InputStream.h"
#import "java/io/InputStreamReader.h"
#import "java/io/OutputStream.h"
#import "java/io/PrintWriter.h"
#import "java/lang/CloneNotSupportedException.h"
#import "java/lang/Integer.h"
#import "java/lang/Iterable.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/StringBuffer.h"
#import "java/util/ArrayList.h"
#import "java/util/Collection.h"
#import "java/util/Collections.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/ListIterator.h"
#import "java/util/SortedSet.h"
#import "java/util/TreeSet.h"

@implementation ComAqwertianFingeringMusPlayFile

static NSString * ComAqwertianFingeringMusPlayFile_INDENT_ = @"  ";
static IOSObjectArray * ComAqwertianFingeringMusPlayFile_TONE_;

- (NSString *)_name {
  return _name_;
}

- (void)set_name:(NSString *)new_name {
  _name_ = new_name;
}

- (id<JavaUtilList>)_events {
  return _events_;
}

- (void)set_events:(id<JavaUtilList>)new_events {
  _events_ = new_events;
}

- (id<JavaUtilList>)_repeats {
  return _repeats_;
}

- (void)set_repeats:(id<JavaUtilList>)new_repeats {
  _repeats_ = new_repeats;
}


+ (NSString *)INDENT {
  return ComAqwertianFingeringMusPlayFile_INDENT_;
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  if ((self = [super init])) {
    _events_ = [[JavaUtilArrayList alloc] init];
    _repeats_ = [[JavaUtilArrayList alloc] init];
    JavaIoBufferedReader *bin = [[JavaIoBufferedReader alloc] initWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:inArg]];
    ComAqwertianFingeringMusPlayFile_MusPlayNote *previous = nil;
    ComAqwertianFingeringMusPlayFile_MusPlayNote *note = nil;
    NSString *line;
    while ((line = [((JavaIoBufferedReader *) NIL_CHK(bin)) readLine]) != nil) {
      line = [NIL_CHK(line) trim];
      ComAqwertianFingeringStringTokenizer *t = [[ComAqwertianFingeringStringTokenizer alloc] initWithNSString:line];
      if ([((ComAqwertianFingeringStringTokenizer *) NIL_CHK(t)) hasMoreTokens]) {
        if (note == nil) note = [[ComAqwertianFingeringMusPlayFile_MusPlayNote alloc] initWithComAqwertianFingeringMusPlayFile_MusPlayNote:previous];
        NSString *cmd = [((ComAqwertianFingeringStringTokenizer *) NIL_CHK(t)) nextToken];
        BOOL isNote = NO;
        if ([@"NAME" isEqual:cmd]) _name_ = [NIL_CHK(line) substring:[@"NAME " length]];
        else if ([@"MEASURE" isEqual:cmd]) ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).measure = [JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(t)) nextToken]];
        else if ([@"METER" isEqual:cmd]) {
          ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.meter)).num = [JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(t)) nextToken]];
          ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.meter)).denom = [JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(t)) nextToken]];
        }
        else if ([@"KEY" isEqual:cmd]) ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).key = [((ComAqwertianFingeringStringTokenizer *) NIL_CHK(t)) nextToken];
        else if ([@"TEMPO" isEqual:cmd]) ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).tempo = [NIL_CHK(line) substring:[@"TEMPO " length]];
        else if ([@"LINE" isEqual:cmd]) ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).line = [((ComAqwertianFingeringStringTokenizer *) NIL_CHK(t)) nextToken];
        else if ([@"REST" isEqual:cmd]) {
          isNote = YES;
          ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).note = 0;
          [ComAqwertianFingeringMusPlayFile setNoteDurationWithComAqwertianFingeringMusPlayFile_MusPlayNote:note withComAqwertianFingeringStringTokenizer:t];
        }
        else if ([@"PHANTOM" isEqual:cmd]) {
          isNote = YES;
          ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).note = 0;
          [ComAqwertianFingeringMusPlayFile setNoteDurationWithComAqwertianFingeringMusPlayFile_MusPlayNote:note withComAqwertianFingeringStringTokenizer:t];
        }
        else if ([@"EXMATCH" isEqual:cmd]) ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).qwerty = [[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(t)) nextToken] charAtWithInt:0];
        else if ([@"VOLPERC" isEqual:cmd]) ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).volume = [JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(t)) nextToken]];
        else if ([@"CARRY" isEqual:cmd]) {
          ComAqwertianFingeringMusPlayFile_MusPlayNote *tmp = [[ComAqwertianFingeringMusPlayFile_MusPlayNote alloc] init];
          [ComAqwertianFingeringMusPlayFile setNoteDurationWithComAqwertianFingeringMusPlayFile_MusPlayNote:tmp withComAqwertianFingeringStringTokenizer:t];
          [((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(previous)) addDurationWithComAqwertianFingeringMusPlayFile_MusPlayNote:tmp];
          previous = note;
          note = nil;
        }
        else if ([@"REPEAT" isEqual:cmd]) {
          ComAqwertianFingeringMusPlayFile_Repeat *r = [[ComAqwertianFingeringMusPlayFile_Repeat alloc] init];
          ((ComAqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).start = [JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(t)) nextToken]];
          ((ComAqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).end = [JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(t)) nextToken]];
          ((ComAqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).repeat_at = [JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(t)) nextToken]];
          [((id<JavaUtilList>) NIL_CHK(_repeats_)) addWithId:r];
        }
        else {
          ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).note = [ComAqwertianFingeringMusPlayFile getNoteWithNSString:cmd withComAqwertianFingeringStringTokenizer:t];
          if (((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).note != 0) {
            isNote = YES;
            [ComAqwertianFingeringMusPlayFile setNoteDurationWithComAqwertianFingeringMusPlayFile_MusPlayNote:note withComAqwertianFingeringStringTokenizer:t];
          }
        }
        if (isNote) {
          [self addNoteWithComAqwertianFingeringMusPlayFile_MusPlayNote:note];
          previous = note;
          note = nil;
        }
      }
    }
    [((JavaIoBufferedReader *) NIL_CHK(bin)) close];
  }
  return self;
}

- (void)addNoteWithComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)note {
  [((id<JavaUtilList>) NIL_CHK(_events_)) addWithId:note];
}

+ (void)setNoteDurationWithComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)note
                               withComAqwertianFingeringStringTokenizer:(ComAqwertianFingeringStringTokenizer *)tok {
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).denom = [JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(tok)) nextToken]];
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).num = 1;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).divisor = 1;
  if ([((ComAqwertianFingeringStringTokenizer *) NIL_CHK(tok)) hasMoreTokens]) {
    ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).num = [JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(tok)) nextToken]];
    if ([((ComAqwertianFingeringStringTokenizer *) NIL_CHK(tok)) hasMoreTokens]) ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).divisor = [JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(tok)) nextToken]];
  }
}

+ (int)getNoteWithNSString:(NSString *)cmd
withComAqwertianFingeringStringTokenizer:(ComAqwertianFingeringStringTokenizer *)tok {
  int n = [ComAqwertianFingeringMusPlayFile calcNoteWithNSString:cmd withNSString:@"C" withInt:0 withComAqwertianFingeringStringTokenizer:tok];
  if (n == 0) n = [ComAqwertianFingeringMusPlayFile calcNoteWithNSString:cmd withNSString:@"D" withInt:2 withComAqwertianFingeringStringTokenizer:tok];
  if (n == 0) n = [ComAqwertianFingeringMusPlayFile calcNoteWithNSString:cmd withNSString:@"E" withInt:4 withComAqwertianFingeringStringTokenizer:tok];
  if (n == 0) n = [ComAqwertianFingeringMusPlayFile calcNoteWithNSString:cmd withNSString:@"F" withInt:5 withComAqwertianFingeringStringTokenizer:tok];
  if (n == 0) n = [ComAqwertianFingeringMusPlayFile calcNoteWithNSString:cmd withNSString:@"G" withInt:7 withComAqwertianFingeringStringTokenizer:tok];
  if (n == 0) n = [ComAqwertianFingeringMusPlayFile calcNoteWithNSString:cmd withNSString:@"A" withInt:9 withComAqwertianFingeringStringTokenizer:tok];
  if (n == 0) n = [ComAqwertianFingeringMusPlayFile calcNoteWithNSString:cmd withNSString:@"B" withInt:11 withComAqwertianFingeringStringTokenizer:tok];
  return n;
}

+ (int)calcNoteWithNSString:(NSString *)cmd
               withNSString:(NSString *)note
                    withInt:(int)base
withComAqwertianFingeringStringTokenizer:(ComAqwertianFingeringStringTokenizer *)tok {
  if ([NIL_CHK(cmd) isEqual:note]) return [ComAqwertianFingeringMusPlayFile calcOctaveWithInt:base withInt:[JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(tok)) nextToken]]];
  if ([NIL_CHK(cmd) isEqual:[NSString stringWithFormat:@"%@b", note]]) return [ComAqwertianFingeringMusPlayFile calcOctaveWithInt:base - 1 withInt:[JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(tok)) nextToken]]];
  if ([NIL_CHK(cmd) isEqual:[NSString stringWithFormat:@"%@bb", note]]) return [ComAqwertianFingeringMusPlayFile calcOctaveWithInt:base - 2 withInt:[JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(tok)) nextToken]]];
  if ([NIL_CHK(cmd) isEqual:[NSString stringWithFormat:@"%@#", note]]) return [ComAqwertianFingeringMusPlayFile calcOctaveWithInt:base + 1 withInt:[JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(tok)) nextToken]]];
  if ([NIL_CHK(cmd) isEqual:[NSString stringWithFormat:@"%@x", note]]) return [ComAqwertianFingeringMusPlayFile calcOctaveWithInt:base + 2 withInt:[JavaLangInteger parseIntWithNSString:[((ComAqwertianFingeringStringTokenizer *) NIL_CHK(tok)) nextToken]]];
  return 0;
}

+ (int)calcOctaveWithInt:(int)base
                 withInt:(int)octave {
  return 60 + octave * 12 + base;
}

+ (IOSObjectArray *)TONE {
  return ComAqwertianFingeringMusPlayFile_TONE_;
}

+ (NSString *)calcMusPlayToneWithInt:(int)note {
  int base = note % 12;
  return [((IOSObjectArray *) NIL_CHK(ComAqwertianFingeringMusPlayFile_TONE_)) objectAtIndex:base];
}

+ (int)calcMusPlayOctaveWithInt:(int)note {
  return note / 12 - 5;
}

+ (void)resetDurationWithComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)note {
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).num = 0;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).denom = ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.meter)).denom;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).divisor = 1;
}

- (int)getChannelCount {
  return 1;
}

- (id<JavaUtilList>)extractNotesWithJavaUtilCollection:(id<JavaUtilCollection>)channels {
  [JavaUtilCollections sortWithJavaUtilList:_events_];
  [self processRepeats];
  id<JavaUtilList> notes = [[JavaUtilArrayList alloc] init];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _events_;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      ComAqwertianFingeringMusPlayFile_MusPlayNote * n = (ComAqwertianFingeringMusPlayFile_MusPlayNote *) [iter__ next];
      [((id<JavaUtilList>) NIL_CHK(notes)) addWithId:n];
    }
  }
  return notes;
}

- (void)processRepeats {
  id<JavaUtilList> newNotes = [[JavaUtilArrayList alloc] init];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _repeats_;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      ComAqwertianFingeringMusPlayFile_Repeat * r = (ComAqwertianFingeringMusPlayFile_Repeat *) [iter__ next];
      {
        id<JavaLangIterable> array__ = (id<JavaLangIterable>) _events_;
        if (!array__) {
          @throw [[JavaLangNullPointerException alloc] init];
        }
        id<JavaUtilIterator> iter__ = [array__ iterator];
        while ([iter__ hasNext]) {
          ComAqwertianFingeringMusPlayFile_MusPlayNote * n = (ComAqwertianFingeringMusPlayFile_MusPlayNote *) [iter__ next];
          if (((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure >= ((ComAqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).start && ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure <= ((ComAqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).end) {
            ComAqwertianFingeringMusPlayFile_MusPlayNote *copy_ = (ComAqwertianFingeringMusPlayFile_MusPlayNote *) [((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)) clone];
            ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(copy_)).measure = ((ComAqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).repeat_at + (((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure - ((ComAqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).start);
            [((id<JavaUtilList>) NIL_CHK(newNotes)) addWithId:copy_];
          }
        }
      }
    }
  }
  if ([((id<JavaUtilList>) NIL_CHK(newNotes)) size] != 0) {
    [((id<JavaUtilList>) NIL_CHK(_events_)) addAllWithJavaUtilCollection:newNotes];
    [JavaUtilCollections sortWithJavaUtilList:_events_];
  }
}

- (void)storeWithJavaIoOutputStream:(JavaIoOutputStream *)o {
  [ComAqwertianFingeringMusPlayFile storeMusPlayNotesWithNSString:_name_ withJavaUtilList:_events_ withJavaIoOutputStream:o];
}

+ (void)processMetaInfoWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)prev
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)n {
  if (![((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(n.meter)) isEqual:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).meter] || ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).key != ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).key || ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).tempo != ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).tempo) {
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"MEASURE %d", ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure]];
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"%@RHNOTE A -4", ComAqwertianFingeringMusPlayFile_INDENT_]];
    ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).measure = 0;
    ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).line = @"";
  }
  if (![((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(n.meter)) isEqual:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).meter]) {
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"%@METER %d %d", ComAqwertianFingeringMusPlayFile_INDENT_, ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(n.meter)).num, ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(n.meter)).denom]];
    ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(prev.meter)).num = ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(n.meter)).num;
    ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(prev.meter)).denom = ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(n.meter)).denom;
  }
  if (((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).key != ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).key) {
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"%@KEY %@", ComAqwertianFingeringMusPlayFile_INDENT_, ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).key]];
    ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).key = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).key;
  }
  if (((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).tempo != ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).tempo) {
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"%@TEMPO %@", ComAqwertianFingeringMusPlayFile_INDENT_, ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).tempo]];
    ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).tempo = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).tempo;
  }
}

+ (void)processMeasureWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)prev
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)n {
  if (((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure != ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).measure) {
    ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).measure = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure;
    ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).line = @"";
    [ComAqwertianFingeringMusPlayFile resetDurationWithComAqwertianFingeringMusPlayFile_MusPlayNote:prev];
  }
}

+ (void)processLineWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)prev
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)n {
  if (![NIL_CHK(n.line) isEqual:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).line]) {
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) println];
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"MEASURE %d", ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure]];
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"%@LINE %@", ComAqwertianFingeringMusPlayFile_INDENT_, ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).line]];
    ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).line = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).line;
    [ComAqwertianFingeringMusPlayFile resetDurationWithComAqwertianFingeringMusPlayFile_MusPlayNote:prev];
  }
}

+ (void)processVolumeWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)prev
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)n {
  if (((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).volume != ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).volume) {
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"%@VOLPERC %d", ComAqwertianFingeringMusPlayFile_INDENT_, ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).volume]];
    ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).volume = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).volume;
  }
}

+ (void)processNoteWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)prev
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)n {
  [((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)) addDurationWithComAqwertianFingeringMusPlayFile_MusPlayNote:n];
  if ([((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(prev.length)) compareToWithId:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).meter] > 0) {
    ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *carry = nil;
    ComAqwertianFingeringMusPlayFile_MusPlayNote *tmp = n;
    while ([((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(prev.length)) compareToWithId:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).meter] > 0) {
      carry = (ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) [((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(prev.length)) clone];
      [((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(carry)) subtractWithComAqwertianFingeringMusPlayFile_MusPlayNote_Duration:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).meter];
      tmp = (ComAqwertianFingeringMusPlayFile_MusPlayNote *) [((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(tmp)) clone];
      [((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(tmp.length)) subtractWithComAqwertianFingeringMusPlayFile_MusPlayNote_Duration:carry];
      if (((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(tmp.length)).num > 0) [ComAqwertianFingeringMusPlayFile outputNoteWithJavaIoPrintWriter:outArg withComAqwertianFingeringMusPlayFile_MusPlayNote:tmp];
      if ([((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(carry)) compareToWithId:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).meter] > 0) {
        carry = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).meter;
      }
      [((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(prev.length)) subtractWithComAqwertianFingeringMusPlayFile_MusPlayNote_Duration:carry];
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).measure++;
      [ComAqwertianFingeringMusPlayFile outputBeatsWithJavaIoPrintWriter:outArg withComAqwertianFingeringMusPlayFile_MusPlayNote:prev];
      [((JavaIoPrintWriter *) NIL_CHK(outArg)) println];
      [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"MEASURE %d", ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).measure]];
      [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:ComAqwertianFingeringMusPlayFile_INDENT_];
      [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:@"CARRY"];
      [ComAqwertianFingeringMusPlayFile outputDurationWithJavaIoPrintWriter:outArg withComAqwertianFingeringMusPlayFile_MusPlayNote_Duration:carry];
    }
    [ComAqwertianFingeringMusPlayFile resetDurationWithComAqwertianFingeringMusPlayFile_MusPlayNote:prev];
    [((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(prev.length)) addWithComAqwertianFingeringMusPlayFile_MusPlayNote_Duration:carry];
  }
  else {
    [ComAqwertianFingeringMusPlayFile outputNoteWithJavaIoPrintWriter:outArg withComAqwertianFingeringMusPlayFile_MusPlayNote:n];
  }
  [ComAqwertianFingeringMusPlayFile outputBeatsWithJavaIoPrintWriter:outArg withComAqwertianFingeringMusPlayFile_MusPlayNote:prev];
}

+ (void)outputNoteWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)n {
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:ComAqwertianFingeringMusPlayFile_INDENT_];
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:[ComAqwertianFingeringMusPlayFile toMusPlayNoteWithInt:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).note]];
  [ComAqwertianFingeringMusPlayFile outputDurationWithJavaIoPrintWriter:outArg withComAqwertianFingeringMusPlayFile_MusPlayNote_Duration:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).length];
  if (((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).note != 0) {
    if (((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).qwerty != 0x0000) [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"  EXMATCH %c Q", ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).qwerty]];
    if (((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).reason != nil && [NIL_CHK(n.reason) length] != 0) [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"# %@", ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).reason]];
  }
}

+ (void)outputDurationWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withComAqwertianFingeringMusPlayFile_MusPlayNote_Duration:(ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *)d {
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:@" "];
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithInt:((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(d)).denom];
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:@" "];
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithInt:((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(d)).num];
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:@" "];
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithInt:((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(d)).divisor];
}

+ (void)outputBeatsWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)prev {
}

+ (NSString *)toMusPlayNoteWithInt:(int)note {
  if (note == 0) return @"REST";
  return [NSString stringWithFormat:@"%@ %d", [ComAqwertianFingeringMusPlayFile calcMusPlayToneWithInt:note], [ComAqwertianFingeringMusPlayFile calcMusPlayOctaveWithInt:note]];
}

- (NSString *)description {
  JavaLangStringBuffer *buff = [[JavaLangStringBuffer alloc] init];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _events_;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      ComAqwertianFingeringMusPlayFile_MusPlayNote * note = (ComAqwertianFingeringMusPlayFile_MusPlayNote *) [iter__ next];
      [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:[((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)) description]] appendWithUnichar:0x000a];
    }
  }
  return [((JavaLangStringBuffer *) NIL_CHK(buff)) description];
}

+ (void)storeNotesWithNSString:(NSString *)songName
              withJavaUtilList:(id<JavaUtilList>)notes
        withJavaIoOutputStream:(JavaIoOutputStream *)o {
  id<JavaUtilList> musNotes = [ComAqwertianFingeringMusPlayFile convertToMusPlayWithJavaLangIterable:notes];
  [ComAqwertianFingeringMusPlayFile storeMusPlayNotesWithNSString:songName withJavaUtilList:musNotes withJavaIoOutputStream:o];
}

+ (void)storeMusPlayNotesWithNSString:(NSString *)songName
                     withJavaUtilList:(id<JavaUtilList>)notes
               withJavaIoOutputStream:(JavaIoOutputStream *)o {
  if ([((id<JavaUtilList>) NIL_CHK(notes)) size] == 0) return;
  JavaIoPrintWriter *out = [[JavaIoPrintWriter alloc] initWithJavaIoOutputStream:o];
  ComAqwertianFingeringMusPlayFile_MusPlayNote *prev = [[ComAqwertianFingeringMusPlayFile_MusPlayNote alloc] init];
  [((JavaIoPrintWriter *) NIL_CHK(out)) printlnWithNSString:[NSString stringWithFormat:@"NAME %@", songName]];
  [((JavaIoPrintWriter *) NIL_CHK(out)) println];
  [ComAqwertianFingeringMusPlayFile processMetaInfoWithJavaIoPrintWriter:out withComAqwertianFingeringMusPlayFile_MusPlayNote:prev withComAqwertianFingeringMusPlayFile_MusPlayNote:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) [((id<JavaUtilList>) NIL_CHK(notes)) getWithInt:0])];
  [ComAqwertianFingeringMusPlayFile resetDurationWithComAqwertianFingeringMusPlayFile_MusPlayNote:prev];
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).volume = 100;
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) notes;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      ComAqwertianFingeringMusPlayFile_MusPlayNote * n = (ComAqwertianFingeringMusPlayFile_MusPlayNote *) [iter__ next];
      [ComAqwertianFingeringMusPlayFile processMetaInfoWithJavaIoPrintWriter:out withComAqwertianFingeringMusPlayFile_MusPlayNote:prev withComAqwertianFingeringMusPlayFile_MusPlayNote:n];
      [ComAqwertianFingeringMusPlayFile processMeasureWithJavaIoPrintWriter:out withComAqwertianFingeringMusPlayFile_MusPlayNote:prev withComAqwertianFingeringMusPlayFile_MusPlayNote:n];
      [ComAqwertianFingeringMusPlayFile processLineWithJavaIoPrintWriter:out withComAqwertianFingeringMusPlayFile_MusPlayNote:prev withComAqwertianFingeringMusPlayFile_MusPlayNote:n];
      [ComAqwertianFingeringMusPlayFile processVolumeWithJavaIoPrintWriter:out withComAqwertianFingeringMusPlayFile_MusPlayNote:prev withComAqwertianFingeringMusPlayFile_MusPlayNote:n];
      [ComAqwertianFingeringMusPlayFile processNoteWithJavaIoPrintWriter:out withComAqwertianFingeringMusPlayFile_MusPlayNote:prev withComAqwertianFingeringMusPlayFile_MusPlayNote:n];
    }
  }
  [((JavaIoPrintWriter *) NIL_CHK(out)) flush];
}

+ (id<JavaUtilList>)convertToMusPlayWithJavaLangIterable:(id<JavaLangIterable>)notes {
  id<JavaUtilList> notesByMeasure = [ComAqwertianFingeringMusPlayFile placeNotesInMeasuresWithJavaLangIterable:notes];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) notesByMeasure;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      id<JavaUtilList> notesInMeasure = (id<JavaUtilList>) [iter__ next];
      {
        id<JavaLangIterable> array__ = (id<JavaLangIterable>) notesInMeasure;
        if (!array__) {
          @throw [[JavaLangNullPointerException alloc] init];
        }
        id<JavaUtilIterator> iter__ = [array__ iterator];
        while ([iter__ hasNext]) {
          ComAqwertianFingeringMusPlayFile_MusPlayNote * note = (ComAqwertianFingeringMusPlayFile_MusPlayNote *) [iter__ next];
          if (((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).line != nil) continue;
          [ComAqwertianFingeringMusPlayFile placeNoteInLineWithJavaUtilList:notesInMeasure withComAqwertianFingeringMusPlayFile_MusPlayNote:note];
        }
      }
    }
  }
  id<JavaUtilList> musNotes = [ComAqwertianFingeringMusPlayFile extractAndSortNotesWithJavaUtilList:notesByMeasure];
  [ComAqwertianFingeringMusPlayFile insertRestsWithJavaUtilList:musNotes];
  return musNotes;
}

+ (id<JavaUtilList>)placeNotesInMeasuresWithJavaLangIterable:(id<JavaLangIterable>)notes {
  int maxVolume = [ComAqwertianFingeringMusPlayFile findMaxVolumeWithJavaLangIterable:notes];
  id<JavaUtilList> notesByMeasure = [[JavaUtilArrayList alloc] init];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) notes;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      ComAqwertianFingeringMusicFile_Note * n = (ComAqwertianFingeringMusicFile_Note *) [iter__ next];
      ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).time = (int) ((double) ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).time / ComAqwertianFingeringMusPlayFile_QUANTUM) * ComAqwertianFingeringMusPlayFile_QUANTUM;
      ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).duration = (int) ((double) ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).duration / ComAqwertianFingeringMusPlayFile_QUANTUM) * ComAqwertianFingeringMusPlayFile_QUANTUM;
      ComAqwertianFingeringMusPlayFile_MusPlayNote *mpn = [ComAqwertianFingeringMusPlayFile toMusPlayNoteWithComAqwertianFingeringMusicFile_Note:n withInt:maxVolume];
      int measureOn = [ComAqwertianFingeringMusPlayFile calcMeasureWithInt:((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).time];
      int measureOff = [ComAqwertianFingeringMusPlayFile calcMeasureWithInt:((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).time + ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).duration];
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(mpn)).measure = measureOn + 1;
      for (int m = measureOn; m <= measureOff; m++) {
        [ComAqwertianFingeringMusPlayFile addNoteToMeasureWithJavaUtilList:notesByMeasure withComAqwertianFingeringMusPlayFile_MusPlayNote:mpn withInt:m];
      }
    }
  }
  return notesByMeasure;
}

+ (int)calcMeasureWithInt:(int)time {
  return (time / ComAqwertianFingeringMusPlayFile_QUANTUM) / ComAqwertianFingeringMusPlayFile_QUANTA_PER_MEASURE;
}

+ (void)addNoteToMeasureWithJavaUtilList:(id<JavaUtilList>)notesByMeasure
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)note
                                 withInt:(int)measure {
  if (measure >= [((id<JavaUtilList>) NIL_CHK(notesByMeasure)) size]) {
    for (int i = [((id<JavaUtilList>) NIL_CHK(notesByMeasure)) size]; i <= measure; i++) {
      [((id<JavaUtilList>) NIL_CHK(notesByMeasure)) addWithId:[[JavaUtilArrayList alloc] init]];
    }
  }
  id<JavaUtilList> notesInMeasure = ((id<JavaUtilList>) [((id<JavaUtilList>) NIL_CHK(notesByMeasure)) getWithInt:measure]);
  [((id<JavaUtilList>) NIL_CHK(notesInMeasure)) addWithId:note];
}

+ (void)placeNoteInLineWithJavaUtilList:(id<JavaUtilList>)notesInMeasure
withComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)note {
  for (int lineNumber = 1; lineNumber < 1000; lineNumber++) {
    NSString *line = [ComAqwertianFingeringMusPlayFile buildLineWithInt:lineNumber];
    BOOL overlaps = NO;
    {
      id<JavaLangIterable> array__ = (id<JavaLangIterable>) notesInMeasure;
      if (!array__) {
        @throw [[JavaLangNullPointerException alloc] init];
      }
      id<JavaUtilIterator> iter__ = [array__ iterator];
      while ([iter__ hasNext]) {
        ComAqwertianFingeringMusPlayFile_MusPlayNote * n = (ComAqwertianFingeringMusPlayFile_MusPlayNote *) [iter__ next];
        if ([NIL_CHK(line) isEqual:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).line] && [((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)) overlapsWithComAqwertianFingeringMusicFile_Note:n]) {
          overlaps = YES;
          break;
        }
      }
    }
    if (!overlaps) {
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).line = line;
      return;
    }
  }
}

+ (NSString *)buildLineWithInt:(int)lineNumber {
  return [NSString stringWithFormat:@"RH%04d" , [JavaLangInteger valueOfWithInt:lineNumber], nil];
}

+ (ComAqwertianFingeringMusPlayFile_MusPlayNote *)toMusPlayNoteWithComAqwertianFingeringMusicFile_Note:(ComAqwertianFingeringMusicFile_Note *)n
                                                                                               withInt:(int)maxVolume {
  ComAqwertianFingeringMusPlayFile_MusPlayNote *mpn = [[ComAqwertianFingeringMusPlayFile_MusPlayNote alloc] init];
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(mpn)).channel = ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).channel;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(mpn)).duration = ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).duration;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(mpn)).key = @"0";
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(mpn.length)).num = ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).duration / ComAqwertianFingeringMusPlayFile_QUANTUM;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(mpn.length)).denom = 1;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(mpn)).line = nil;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(mpn)).measure = 0;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(mpn.meter)).num = ComAqwertianFingeringMusPlayFile_QUANTA_PER_MEASURE;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(mpn.meter)).denom = 1;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(mpn)).note = ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).note;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(mpn)).qwerty = ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).qwerty;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(mpn)).reason = ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).reason;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(mpn)).tempo = [NSString stringWithFormat:@"1 %d", (20000 / ComAqwertianFingeringMusPlayFile_QUANTUM)];
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(mpn)).time = ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).time;
  ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(mpn)).volume = 100 * ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).volume / maxVolume;
  return mpn;
}

+ (id<JavaUtilList>)extractAndSortNotesWithJavaUtilList:(id<JavaUtilList>)notesByMeasure {
  id<JavaUtilSortedSet> notes = [[JavaUtilTreeSet alloc] initWithJavaUtilComparator:[[ComAqwertianFingeringMusPlayFile_$1 alloc] init]];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) notesByMeasure;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      id<JavaUtilList> notesInMeasure = (id<JavaUtilList>) [iter__ next];
      {
        id<JavaLangIterable> array__ = (id<JavaLangIterable>) notesInMeasure;
        if (!array__) {
          @throw [[JavaLangNullPointerException alloc] init];
        }
        id<JavaUtilIterator> iter__ = [array__ iterator];
        while ([iter__ hasNext]) {
          ComAqwertianFingeringMusPlayFile_MusPlayNote * note = (ComAqwertianFingeringMusPlayFile_MusPlayNote *) [iter__ next];
          [((id<JavaUtilSortedSet>) NIL_CHK(notes)) addWithId:note];
        }
      }
    }
  }
  return [[JavaUtilArrayList alloc] initWithJavaUtilCollection:notes];
}

+ (void)insertRestsWithJavaUtilList:(id<JavaUtilList>)notes {
  id<JavaUtilListIterator> iter = ((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(notes)) listIterator]);
  int lastOffTime = 0;
  ComAqwertianFingeringMusPlayFile_MusPlayNote *prev = nil;
  while ([((id<JavaUtilListIterator>) NIL_CHK(iter)) hasNext]) {
    ComAqwertianFingeringMusPlayFile_MusPlayNote *next = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) [((id<JavaUtilListIterator>) NIL_CHK(iter)) next]);
    if (prev == nil || ![NIL_CHK(prev.line) isEqual:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(next)).line]) {
      prev = next;
      lastOffTime = 0;
    }
    if (((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(next)).time != lastOffTime) {
      ComAqwertianFingeringMusPlayFile_MusPlayNote *rest = [[ComAqwertianFingeringMusPlayFile_MusPlayNote alloc] init];
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).channel = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).channel;
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).duration = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(next)).time - lastOffTime;
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).key = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).key;
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(rest.length)).num = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).duration / ComAqwertianFingeringMusPlayFile_QUANTUM;
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(rest.length)).denom = 1;
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).line = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).line;
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).meter = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).meter;
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).note = 0;
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).qwerty = 0x0000;
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).reason = @"";
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).tempo = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).tempo;
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).time = lastOffTime;
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).volume = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).volume;
      ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).measure = [ComAqwertianFingeringMusPlayFile calcMeasureWithInt:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(rest)).time] + 1;
      [((id<JavaUtilListIterator>) NIL_CHK(iter)) previous];
      [((id<JavaUtilListIterator>) NIL_CHK(iter)) addWithId:rest];
      [((id<JavaUtilListIterator>) NIL_CHK(iter)) next];
    }
    lastOffTime = ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(next)).time + ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(next)).duration;
    prev = next;
  }
}

+ (int)findMaxVolumeWithJavaLangIterable:(id<JavaLangIterable>)notes {
  int maxVol = 0;
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) notes;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      ComAqwertianFingeringMusicFile_Note * n = (ComAqwertianFingeringMusicFile_Note *) [iter__ next];
      if (((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).volume > maxVol) {
        maxVol = ((ComAqwertianFingeringMusicFile_Note *) NIL_CHK(n)).volume;
      }
    }
  }
  return maxVol;
}

+ (void)initialize {
  if (self == [ComAqwertianFingeringMusPlayFile class]) {
    ComAqwertianFingeringMusPlayFile_TONE_ = [IOSObjectArray arrayWithObjects:(id[]){ @"C", @"C#", @"D", @"D#", @"E", @"F", @"F#", @"G", @"G#", @"A", @"A#", @"B" } count:12 type:[IOSClass classWithClass:[NSString class]]];
  }
}

@end


@implementation ComAqwertianFingeringMusPlayFile_MusPlayNote

- (ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *)meter {
  return meter_;
}

- (void)setMeter:(ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *)newMeter {
  meter_ = newMeter;
}

- (NSString *)key {
  return key_;
}

- (void)setKey:(NSString *)newKey {
  key_ = newKey;
}

- (NSString *)tempo {
  return tempo_;
}

- (void)setTempo:(NSString *)newTempo {
  tempo_ = newTempo;
}

- (int)measure {
  return measure_;
}

- (void)setMeasure:(int)newMeasure {
  measure_ = newMeasure;
}

- (NSString *)line {
  return line_;
}

- (void)setLine:(NSString *)newLine {
  line_ = newLine;
}

- (ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *)length {
  return length_;
}

- (void)setLength:(ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *)newLength {
  length_ = newLength;
}

- (int)sequence {
  return sequence_;
}

- (void)setSequence:(int)newSequence {
  sequence_ = newSequence;
}


- (id)init {
  if ((self = [super initWithInt:0 withInt:0 withInt:0 withInt:0 withInt:100])) {
    meter_ = [[ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration alloc] initWithBOOL:NO];
    key_ = @"";
    tempo_ = @"";
    measure_ = 1;
    line_ = @"";
    length_ = [[ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration alloc] init];
  }
  return self;
}

- (id)initWithComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)previous {
  if ((self = [self init])) {
    if (previous != nil) {
      meter_ = (ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) [((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(previous.meter)) clone];
      key_ = previous.key;
      tempo_ = previous.tempo;
      measure_ = previous.measure;
      line_ = previous.line;
      volume_ = previous.volume;
      sequence_ = previous.sequence + 1;
    }
  }
  return self;
}

- (id)clone {
  @try {
    ComAqwertianFingeringMusPlayFile_MusPlayNote *clone = (ComAqwertianFingeringMusPlayFile_MusPlayNote *) [super clone];
    ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(clone)).length = (ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) [((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(clone.length)) clone];
    ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(clone)).meter = (ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) [((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(clone.meter)) clone];
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    [((JavaLangCloneNotSupportedException *) NIL_CHK(e)) printStackTrace];
    return nil;
  }
}

- (NSString *)description {
  NSString *s = [NSString stringWithFormat:@"Measure %d/%@: ", measure_, line_];
  s = [NSString stringWithFormat:@"%@%@", s, [NSString stringWithFormat:@"%d %@", note_, [((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(length_)) description]]];
  return s;
}

- (int)compareToWithComAqwertianFingeringMusicFile_Note:(ComAqwertianFingeringMusicFile_Note *)note {
  ComAqwertianFingeringMusPlayFile_MusPlayNote *n = (ComAqwertianFingeringMusPlayFile_MusPlayNote *) note;
  if (measure_ != ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure) return measure_ - ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure;
  int cmp = [NIL_CHK(line_) compareToWithId:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).line];
  if (cmp != 0) return cmp;
  return sequence_ - ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).sequence;
}

- (void)addDurationWithComAqwertianFingeringMusPlayFile_MusPlayNote:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)toAdd {
  [((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(length_)) addWithComAqwertianFingeringMusPlayFile_MusPlayNote_Duration:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(toAdd)).length];
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

@end


@implementation ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration

- (int)num {
  return num_;
}

- (void)setNum:(int)newNum {
  num_ = newNum;
}

- (int)denom {
  return denom_;
}

- (void)setDenom:(int)newDenom {
  denom_ = newDenom;
}

- (int)divisor {
  return divisor_;
}

- (void)setDivisor:(int)newDivisor {
  divisor_ = newDivisor;
}

- (BOOL)reducable {
  return reducable_;
}

- (void)setReducable:(BOOL)newReducable {
  reducable_ = newReducable;
}


- (id)init {
  return [self initWithBOOL:YES];
}

- (id)initWithBOOL:(BOOL)reducable {
  if ((self = [super init])) {
    denom_ = 1;
    divisor_ = 1;
    self.reducable = reducable;
  }
  return self;
}

- (void)addWithComAqwertianFingeringMusPlayFile_MusPlayNote_Duration:(ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *)toAdd {
  num_ = num_ * ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toAdd)).denom * ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toAdd)).divisor + ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toAdd)).num * denom_ * divisor_;
  denom_ = denom_ * ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toAdd)).denom;
  divisor_ = divisor_ * ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toAdd)).divisor;
  [self reduce];
}

- (void)subtractWithComAqwertianFingeringMusPlayFile_MusPlayNote_Duration:(ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *)toSub {
  num_ = num_ * ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toSub)).denom * ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toSub)).divisor - ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toSub)).num * denom_ * divisor_;
  denom_ = denom_ * ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toSub)).denom;
  divisor_ = divisor_ * ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toSub)).divisor;
  [self reduce];
}

- (int)compareToWithId:(ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *)toComp {
  return num_ * ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toComp)).denom * ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toComp)).divisor - ((ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toComp)).num * denom_ * divisor_;
}

- (BOOL)isEqual:(id)o {
  if ([o isKindOfClass:[ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration class]]) return ([self compareToWithId:(ComAqwertianFingeringMusPlayFile_MusPlayNote_Duration *) o] == 0);
  return NO;
}

- (id)clone {
  @try {
    return (NSObject *) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    [((JavaLangCloneNotSupportedException *) NIL_CHK(e)) printStackTrace];
    return nil;
  }
}

- (void)reduce {
  if (!reducable_) return;
  if (num_ % divisor_ == 0) {
    num_ /= divisor_;
    divisor_ = 1;
  }
  if (num_ % denom_ == 0) {
    num_ /= denom_;
    denom_ = 1;
  }
  while ((num_ % 2 == 0) && (denom_ % 2 == 0)) {
    num_ /= 2;
    denom_ /= 2;
  }
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%d %d %d", denom_, num_, divisor_];
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

@end


@implementation ComAqwertianFingeringMusPlayFile_Repeat

- (int)start {
  return start_;
}

- (void)setStart:(int)newStart {
  start_ = newStart;
}

- (int)end {
  return end_;
}

- (void)setEnd:(int)newEnd {
  end_ = newEnd;
}

- (int)repeat_at {
  return repeat_at_;
}

- (void)setRepeat_at:(int)newRepeat_at {
  repeat_at_ = newRepeat_at;
}


@end


@implementation ComAqwertianFingeringMusPlayFile_$1

- (int)compareWithId:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)n1
              withId:(ComAqwertianFingeringMusPlayFile_MusPlayNote *)n2 {
  int cmp = [NIL_CHK(n1.line) compareToWithId:((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n2)).line];
  if (cmp != 0) return cmp;
  if (((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n1)).measure != ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n2)).measure) return ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n1)).measure - ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n2)).measure;
  return ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n1)).time - ((ComAqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n2)).time;
}

@end


