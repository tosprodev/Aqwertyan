//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nziebart/GoogleDrive/Aqwertian/Aqwertian/fingering/Aqwertian.java
//
//  Created by nziebart on 9/17/12.
//

#import "Aqwertian/fingering/Aqwertian.h"
#import "Aqwertian/fingering/MidiFile.h"
#import "Aqwertian/fingering/MusNotesFile.h"
#import "Aqwertian/fingering/MusPlayFile.h"
#import "Aqwertian/fingering/MusicFile.h"
#import "Aqwertian/fingering/PatternList.h"
#import "Aqwertian/fingering/QwertyMapper.h"
#import "IOSObjectArray.h"
#import "java/io/FileInputStream.h"
#import "java/io/FileOutputStream.h"
#import "java/io/FileReader.h"
#import "java/io/IOException.h"
#import "java/io/OutputStream.h"
#import "java/lang/Exception.h"
#import "java/lang/Integer.h"
#import "java/lang/NullPointerException.h"
#import "java/util/ArrayList.h"
#import "java/util/Collection.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"

@implementation AqwertianFingeringAqwertian

static AqwertianFingeringQwertyMapper_AlgorithmEnum * AqwertianFingeringAqwertian_ALGO_;

+ (AqwertianFingeringQwertyMapper_AlgorithmEnum *)ALGO {
  return AqwertianFingeringAqwertian_ALGO_;
}

+ (void)printStatsWithAqwertianFingeringQwertyMapper:(AqwertianFingeringQwertyMapper *)qm
                              withJavaUtilCollection:(id<JavaUtilCollection>)notes
                   withAqwertianFingeringPatternList:(AqwertianFingeringPatternList *)patterns {
  int count = 250;
  NSLog(@"%@", [((AqwertianFingeringPatternList *) NIL_CHK(patterns)) description]);
  NSLog(@"%@", [NSString stringWithFormat:@"%d notes: ", [((id<JavaUtilCollection>) NIL_CHK(notes)) size]]);
  NSLog(@"%@", [((AqwertianFingeringQwertyMapper *) NIL_CHK(qm)) format]);
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) notes;
    if (!array__) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      AqwertianFingeringMusicFile_Note * note = (AqwertianFingeringMusicFile_Note *) [iter__ next];
      if (--count >= 0) NSLog(@"%@", [((AqwertianFingeringQwertyMapper *) NIL_CHK(qm)) formatWithAqwertianFingeringMusicFile_Note:note]);
      else break;
    }
  }
  NSLog(@"");
  [((AqwertianFingeringQwertyMapper *) NIL_CHK(qm)) printStatisticsWithJavaUtilCollection:notes];
  NSLog(@"%@", @"----------------");
  NSLog(@"");
}

+ (AqwertianFingeringMusicFile *)createMusicFileWithNSString:(NSString *)fileName {
  AqwertianFingeringMusicFile *mf;
  JavaIoFileInputStream *file = [[[JavaIoFileInputStream alloc] initWithNSString:fileName] autorelease];
  if ([NIL_CHK(fileName) hasSuffix:@".mus"]) mf = [[[AqwertianFingeringMusPlayFile alloc] initWithJavaIoInputStream:file] autorelease];
  else if ([NIL_CHK(fileName) hasSuffix:@".nts"]) mf = [[[AqwertianFingeringMusNotesFile alloc] initWithJavaIoInputStream:file] autorelease];
  else mf = [[[AqwertianFingeringMidiFile alloc] initWithJavaIoInputStream:file] autorelease];
  [((JavaIoFileInputStream *) NIL_CHK(file)) close];
  return mf;
}

+ (AqwertianFingeringPatternList *)getPatternsWithNSString:(NSString *)fileName {
  @try {
    JavaIoFileReader *pfile = [[[JavaIoFileReader alloc] initWithNSString:[NSString stringWithFormat:@"%@.patterns", fileName]] autorelease];
    AqwertianFingeringPatternList *patterns = [[[AqwertianFingeringPatternList alloc] initWithJavaIoReader:pfile] autorelease];
    [((JavaIoFileReader *) NIL_CHK(pfile)) close];
    return patterns;
  }
  @catch (JavaIoIOException *e) {
    return [[[AqwertianFingeringPatternList alloc] init] autorelease];
  }
}

+ (void)storeMusicFileWithAqwertianFingeringMusicFile:(AqwertianFingeringMusicFile *)m
                                         withNSString:(NSString *)fileName {
  JavaIoOutputStream *out = [[[JavaIoFileOutputStream alloc] initWithNSString:fileName] autorelease];
  [((AqwertianFingeringMusicFile *) NIL_CHK(m)) storeWithJavaIoOutputStream:out];
  [((JavaIoOutputStream *) NIL_CHK(out)) close];
}

+ (void)initialize {
  if (self == [AqwertianFingeringAqwertian class]) {
    AqwertianFingeringAqwertian_ALGO_ = [[AqwertianFingeringQwertyMapper_AlgorithmEnum USAGE] retain];
  }
}

@end


int main( int argc, const char *argv[] ) {
  NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
  IOSObjectArray *args = JreEmulationMainArguments(argc, argv);

  @try {
    if ((int) [((IOSObjectArray *) NIL_CHK(args)) count] == 0) {
      NSLog(@"%@", @"Usage: Aqwertian -level infile outfile");
      NSLog(@"%@", @"    level is optional and must be one of");
      NSLog(@"%@", @"    b(eginner), i(ntermediate), a(dvanced), e(xpert)");
      NSLog(@"%@", @"    default is expert.");
      return;
    }
    AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum *level = [AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum EXPERT];
    int index = 0;
    NSString *parm = [((IOSObjectArray *) NIL_CHK(args)) objectAtIndex:index];
    if ([NIL_CHK(parm) hasPrefix:@"-"]) {
      unichar l = [NIL_CHK(parm) charAtWithInt:1];
      if (l == 'b') level = [AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum BEGINNER];
      else if (l == 'i') level = [AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum INTERMEDIATE];
      else if (l == 'a') level = [AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum ADVANCED];
      else if (l == 'e') level = [AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum EXPERT];
      index++;
    }
    NSString *infile = [((IOSObjectArray *) NIL_CHK(args)) objectAtIndex:index];
    index++;
    NSString *outfile = [NSString stringWithFormat:@"%@.out", infile];
    if ((int) [((IOSObjectArray *) NIL_CHK(args)) count] >= index + 1) outfile = [((IOSObjectArray *) NIL_CHK(args)) objectAtIndex:index];
    AqwertianFingeringMusicFile *midi = [AqwertianFingeringAqwertian createMusicFileWithNSString:infile];
    AqwertianFingeringPatternList *patterns = [AqwertianFingeringAqwertian getPatternsWithNSString:infile];
    id<JavaUtilCollection> notes = [((AqwertianFingeringMusicFile *) NIL_CHK(midi)) getNotesWithJavaUtilCollection:[[[JavaUtilArrayList alloc] init] autorelease]];
    AqwertianFingeringQwertyMapper *qm = [[[AqwertianFingeringQwertyMapper alloc] initWithAqwertianFingeringQwertyMapper_AlgorithmEnum:[AqwertianFingeringAqwertian ALGO] withAqwertianFingeringQwertyMapper_LevelOfDifficultyEnum:level] autorelease];
    [((AqwertianFingeringQwertyMapper *) NIL_CHK(qm)) mapWithJavaUtilCollection:notes withAqwertianFingeringPatternList:patterns];
    [AqwertianFingeringAqwertian printStatsWithAqwertianFingeringQwertyMapper:qm withJavaUtilCollection:notes withAqwertianFingeringPatternList:patterns];
    [AqwertianFingeringAqwertian storeMusicFileWithAqwertianFingeringMusicFile:midi withNSString:outfile];
  }
  @catch (JavaLangException *ex) {
    [((JavaLangException *) NIL_CHK(ex)) printStackTrace];
  }
  int exitCode = 0;

  [pool release];
  return exitCode;
}
