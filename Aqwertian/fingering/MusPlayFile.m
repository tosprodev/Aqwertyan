//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nziebart/GoogleDrive/Aqwertian/Aqwertian/fingering/MusPlayFile.java
//
//  Created by nziebart on 9/17/12.
//

#import "Aqwertian/fingering/MusPlayFile.h"
#import "Aqwertian/fingering/MusicFile.h"
#import "Aqwertian/fingering/util/StringTokenizer.h"
#import "IOSObjectArray.h"
#import "java/io/BufferedReader.h"
#import "java/io/InputStream.h"
#import "java/io/InputStreamReader.h"
#import "java/io/OutputStream.h"
#import "java/io/PrintWriter.h"
#import "java/lang/CloneNotSupportedException.h"
#import "java/lang/Integer.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/StringBuffer.h"
#import "java/util/ArrayList.h"
#import "java/util/Collection.h"
#import "java/util/Collections.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"

@implementation AqwertianFingeringMusPlayFile

static NSString * AqwertianFingeringMusPlayFile_INDENT_ = @"  ";
static IOSObjectArray * AqwertianFingeringMusPlayFile_TONE_;

- (NSString *)_name {
  return _name_;
}

- (void)set_name:(NSString *)new_name {
  _name_ = new_name;
}

- (id<JavaUtilList>)_events {
  return _events_;
}

- (void)set_events:(id<JavaUtilList>)new_events {
  _events_ = new_events;
}

- (id<JavaUtilList>)_repeats {
  return _repeats_;
}

- (void)set_repeats:(id<JavaUtilList>)new_repeats {
  _repeats_ = new_repeats;
}


+ (NSString *)INDENT {
  return AqwertianFingeringMusPlayFile_INDENT_;
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  if ((self = [super init])) {
    _events_ = [[JavaUtilArrayList alloc] init];
    _repeats_ = [[JavaUtilArrayList alloc] init];
    JavaIoBufferedReader *bin = [[JavaIoBufferedReader alloc] initWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:inArg]];
    AqwertianFingeringMusPlayFile_MusPlayNote *previous = nil;
    AqwertianFingeringMusPlayFile_MusPlayNote *note = nil;
    NSString *line;
    while ((line = [((JavaIoBufferedReader *) NIL_CHK(bin)) readLine]) != nil) {
      line = [NIL_CHK(line) trim];
      AqwertianFingeringUtilStringTokenizer *t = [[AqwertianFingeringUtilStringTokenizer alloc] initWithNSString:line];
      if ([((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) hasMoreTokens]) {
        if (note == nil) note = [[AqwertianFingeringMusPlayFile_MusPlayNote alloc] initWithAqwertianFingeringMusPlayFile_MusPlayNote:previous];
        NSString *cmd = [((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) nextToken];
        BOOL isNote = NO;
        if ([@"NAME" isEqual:cmd]) _name_ = [NIL_CHK(line) substring:[@"NAME " length]];
        else if ([@"MEASURE" isEqual:cmd]) ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).measure = [JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) nextToken]];
        else if ([@"METER" isEqual:cmd]) {
          ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.meter)).num = [JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) nextToken]];
          ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.meter)).denom = [JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) nextToken]];
        }
        else if ([@"KEY" isEqual:cmd]) ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).key = [((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) nextToken];
        else if ([@"TEMPO" isEqual:cmd]) ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).tempo = [NIL_CHK(line) substring:[@"TEMPO " length]];
        else if ([@"LINE" isEqual:cmd]) ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).line = [((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) nextToken];
        else if ([@"REST" isEqual:cmd]) {
          isNote = YES;
          ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).note = 0;
          [self setNoteDurationWithAqwertianFingeringMusPlayFile_MusPlayNote:note withAqwertianFingeringUtilStringTokenizer:t];
        }
        else if ([@"PHANTOM" isEqual:cmd]) {
          isNote = YES;
          ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).note = 0;
          [self setNoteDurationWithAqwertianFingeringMusPlayFile_MusPlayNote:note withAqwertianFingeringUtilStringTokenizer:t];
        }
        else if ([@"EXMATCH" isEqual:cmd]) ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).qwerty = [[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) nextToken] charAtWithInt:0];
        else if ([@"VOLPERC" isEqual:cmd]) ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).volume = [JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) nextToken]];
        else if ([@"CARRY" isEqual:cmd]) {
          AqwertianFingeringMusPlayFile_MusPlayNote *tmp = [[AqwertianFingeringMusPlayFile_MusPlayNote alloc] init];
          [self setNoteDurationWithAqwertianFingeringMusPlayFile_MusPlayNote:tmp withAqwertianFingeringUtilStringTokenizer:t];
          [((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(previous)) addDurationWithAqwertianFingeringMusPlayFile_MusPlayNote:tmp];
          previous = note;
          note = nil;
        }
        else if ([@"REPEAT" isEqual:cmd]) {
          AqwertianFingeringMusPlayFile_Repeat *r = [[AqwertianFingeringMusPlayFile_Repeat alloc] init];
          ((AqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).start = [JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) nextToken]];
          ((AqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).end = [JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) nextToken]];
          ((AqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).repeat_at = [JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) nextToken]];
          [((id<JavaUtilList>) NIL_CHK(_repeats_)) addWithId:r];
        }
        else {
          ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).note = [self getNoteWithNSString:cmd withAqwertianFingeringUtilStringTokenizer:t];
          if (((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)).note != 0) {
            isNote = YES;
            [self setNoteDurationWithAqwertianFingeringMusPlayFile_MusPlayNote:note withAqwertianFingeringUtilStringTokenizer:t];
          }
        }
        if (isNote) {
          [self addNoteWithAqwertianFingeringMusPlayFile_MusPlayNote:note];
          previous = note;
          note = nil;
        }
      }
    }
    [((JavaIoBufferedReader *) NIL_CHK(bin)) close];
  }
  return self;
}

- (void)addNoteWithAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)note {
  [((id<JavaUtilList>) NIL_CHK(_events_)) addWithId:note];
}

- (void)setNoteDurationWithAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)note
                           withAqwertianFingeringUtilStringTokenizer:(AqwertianFingeringUtilStringTokenizer *)tok {
  ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).denom = [JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(tok)) nextToken]];
  ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).num = 1;
  ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).divisor = 1;
  if ([((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(tok)) hasMoreTokens]) {
    ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).num = [JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(tok)) nextToken]];
    if ([((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(tok)) hasMoreTokens]) ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).divisor = [JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(tok)) nextToken]];
  }
}

- (int)getNoteWithNSString:(NSString *)cmd
withAqwertianFingeringUtilStringTokenizer:(AqwertianFingeringUtilStringTokenizer *)tok {
  int n = [self calcNoteWithNSString:cmd withNSString:@"C" withInt:0 withAqwertianFingeringUtilStringTokenizer:tok];
  if (n == 0) n = [self calcNoteWithNSString:cmd withNSString:@"D" withInt:2 withAqwertianFingeringUtilStringTokenizer:tok];
  if (n == 0) n = [self calcNoteWithNSString:cmd withNSString:@"E" withInt:4 withAqwertianFingeringUtilStringTokenizer:tok];
  if (n == 0) n = [self calcNoteWithNSString:cmd withNSString:@"F" withInt:5 withAqwertianFingeringUtilStringTokenizer:tok];
  if (n == 0) n = [self calcNoteWithNSString:cmd withNSString:@"G" withInt:7 withAqwertianFingeringUtilStringTokenizer:tok];
  if (n == 0) n = [self calcNoteWithNSString:cmd withNSString:@"A" withInt:9 withAqwertianFingeringUtilStringTokenizer:tok];
  if (n == 0) n = [self calcNoteWithNSString:cmd withNSString:@"B" withInt:11 withAqwertianFingeringUtilStringTokenizer:tok];
  return n;
}

- (int)calcNoteWithNSString:(NSString *)cmd
               withNSString:(NSString *)note
                    withInt:(int)base
withAqwertianFingeringUtilStringTokenizer:(AqwertianFingeringUtilStringTokenizer *)tok {
  if ([NIL_CHK(cmd) isEqual:note]) return [self calcOctaveWithInt:base withInt:[JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(tok)) nextToken]]];
  if ([NIL_CHK(cmd) isEqual:[NSString stringWithFormat:@"%@b", note]]) return [self calcOctaveWithInt:base - 1 withInt:[JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(tok)) nextToken]]];
  if ([NIL_CHK(cmd) isEqual:[NSString stringWithFormat:@"%@bb", note]]) return [self calcOctaveWithInt:base - 2 withInt:[JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(tok)) nextToken]]];
  if ([NIL_CHK(cmd) isEqual:[NSString stringWithFormat:@"%@#", note]]) return [self calcOctaveWithInt:base + 1 withInt:[JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(tok)) nextToken]]];
  if ([NIL_CHK(cmd) isEqual:[NSString stringWithFormat:@"%@x", note]]) return [self calcOctaveWithInt:base + 2 withInt:[JavaLangInteger parseIntWithNSString:[((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(tok)) nextToken]]];
  return 0;
}

- (int)calcOctaveWithInt:(int)base
                 withInt:(int)octave {
  return 60 + octave * 12 + base;
}

+ (IOSObjectArray *)TONE {
  return AqwertianFingeringMusPlayFile_TONE_;
}

- (NSString *)calcMusPlayToneWithInt:(int)note {
  int base = note % 12;
  return [((IOSObjectArray *) NIL_CHK(AqwertianFingeringMusPlayFile_TONE_)) objectAtIndex:base];
}

- (int)calcMusPlayOctaveWithInt:(int)note {
  return note / 12 - 5;
}

- (void)resetDurationWithAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)note {
  ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).num = 0;
  ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).denom = ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.meter)).denom;
  ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(note.length)).divisor = 1;
}

- (int)getChannelCount {
  return 1;
}

- (id<JavaUtilList>)extractNotesWithJavaUtilCollection:(id<JavaUtilCollection>)channels {
  [JavaUtilCollections sortWithJavaUtilList:_events_];
  [self processRepeats];
  id<JavaUtilList> notes = [[JavaUtilArrayList alloc] init];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _events_;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      AqwertianFingeringMusPlayFile_MusPlayNote * n = (AqwertianFingeringMusPlayFile_MusPlayNote *) [iter__ next];
      [((id<JavaUtilList>) NIL_CHK(notes)) addWithId:n];
    }
  }
  return notes;
}

- (void)processRepeats {
  id<JavaUtilList> newNotes = [[JavaUtilArrayList alloc] init];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _repeats_;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      AqwertianFingeringMusPlayFile_Repeat * r = (AqwertianFingeringMusPlayFile_Repeat *) [iter__ next];
      {
        id<JavaLangIterable> array__ = (id<JavaLangIterable>) _events_;
        if (!array__) {
          @throw [[JavaLangNullPointerException alloc] init];
        }
        id<JavaUtilIterator> iter__ = [array__ iterator];
        while ([iter__ hasNext]) {
          AqwertianFingeringMusPlayFile_MusPlayNote * n = (AqwertianFingeringMusPlayFile_MusPlayNote *) [iter__ next];
          if (((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure >= ((AqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).start && ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure <= ((AqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).end) {
            AqwertianFingeringMusPlayFile_MusPlayNote *copy_ = (AqwertianFingeringMusPlayFile_MusPlayNote *) [((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)) clone];
            ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(copy_)).measure = ((AqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).repeat_at + (((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure - ((AqwertianFingeringMusPlayFile_Repeat *) NIL_CHK(r)).start);
            [((id<JavaUtilList>) NIL_CHK(newNotes)) addWithId:copy_];
          }
        }
      }
    }
  }
  if ([((id<JavaUtilList>) NIL_CHK(newNotes)) size] != 0) {
    [((id<JavaUtilList>) NIL_CHK(_events_)) addAllWithJavaUtilCollection:newNotes];
    [JavaUtilCollections sortWithJavaUtilList:_events_];
  }
}

- (void)storeWithJavaIoOutputStream:(JavaIoOutputStream *)o {
  if ([((id<JavaUtilList>) NIL_CHK(_events_)) size] == 0) return;
  JavaIoPrintWriter *out = [[JavaIoPrintWriter alloc] initWithJavaIoOutputStream:o];
  AqwertianFingeringMusPlayFile_MusPlayNote *prev = [[AqwertianFingeringMusPlayFile_MusPlayNote alloc] init];
  [((JavaIoPrintWriter *) NIL_CHK(out)) printlnWithNSString:[NSString stringWithFormat:@"NAME %@", _name_]];
  [((JavaIoPrintWriter *) NIL_CHK(out)) println];
  [self processMetaInfoWithJavaIoPrintWriter:out withAqwertianFingeringMusPlayFile_MusPlayNote:prev withAqwertianFingeringMusPlayFile_MusPlayNote:((AqwertianFingeringMusPlayFile_MusPlayNote *) [((id<JavaUtilList>) NIL_CHK(_events_)) getWithInt:0])];
  [self resetDurationWithAqwertianFingeringMusPlayFile_MusPlayNote:prev];
  ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).volume = 100;
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _events_;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      AqwertianFingeringMusPlayFile_MusPlayNote * n = (AqwertianFingeringMusPlayFile_MusPlayNote *) [iter__ next];
      [self processMetaInfoWithJavaIoPrintWriter:out withAqwertianFingeringMusPlayFile_MusPlayNote:prev withAqwertianFingeringMusPlayFile_MusPlayNote:n];
      [self processMeasureWithJavaIoPrintWriter:out withAqwertianFingeringMusPlayFile_MusPlayNote:prev withAqwertianFingeringMusPlayFile_MusPlayNote:n];
      [self processLineWithJavaIoPrintWriter:out withAqwertianFingeringMusPlayFile_MusPlayNote:prev withAqwertianFingeringMusPlayFile_MusPlayNote:n];
      [self processVolumeWithJavaIoPrintWriter:out withAqwertianFingeringMusPlayFile_MusPlayNote:prev withAqwertianFingeringMusPlayFile_MusPlayNote:n];
      [self processNoteWithJavaIoPrintWriter:out withAqwertianFingeringMusPlayFile_MusPlayNote:prev withAqwertianFingeringMusPlayFile_MusPlayNote:n];
    }
  }
  [((JavaIoPrintWriter *) NIL_CHK(out)) flush];
}

- (void)processMetaInfoWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)prev
withAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)n {
  if (![((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(n.meter)) isEqual:((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).meter] || ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).key != ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).key || ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).tempo != ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).tempo) {
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"MEASURE %d", ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure]];
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"%@RHNOTE A -4", AqwertianFingeringMusPlayFile_INDENT_]];
    ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).measure = 0;
    ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).line = @"";
  }
  if (![((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(n.meter)) isEqual:((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).meter]) {
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"%@METER %d %d", AqwertianFingeringMusPlayFile_INDENT_, ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(n.meter)).num, ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(n.meter)).denom]];
    ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(prev.meter)).num = ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(n.meter)).num;
    ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(prev.meter)).denom = ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(n.meter)).denom;
  }
  if (((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).key != ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).key) {
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"%@KEY %@", AqwertianFingeringMusPlayFile_INDENT_, ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).key]];
    ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).key = ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).key;
  }
  if (((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).tempo != ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).tempo) {
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"%@TEMPO %@", AqwertianFingeringMusPlayFile_INDENT_, ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).tempo]];
    ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).tempo = ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).tempo;
  }
}

- (void)processMeasureWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)prev
withAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)n {
  if (((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure != ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).measure) {
    ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).measure = ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure;
    ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).line = @"";
    [self resetDurationWithAqwertianFingeringMusPlayFile_MusPlayNote:prev];
  }
}

- (void)processLineWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)prev
withAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)n {
  if (![NIL_CHK(n.line) isEqual:((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).line]) {
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) println];
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"MEASURE %d", ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure]];
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"%@LINE %@", AqwertianFingeringMusPlayFile_INDENT_, ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).line]];
    ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).line = ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).line;
    [self resetDurationWithAqwertianFingeringMusPlayFile_MusPlayNote:prev];
  }
}

- (void)processVolumeWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)prev
withAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)n {
  if (((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).volume != ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).volume) {
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"%@VOLPERC %d", AqwertianFingeringMusPlayFile_INDENT_, ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).volume]];
    ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).volume = ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).volume;
  }
}

- (void)processNoteWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)prev
withAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)n {
  [((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)) addDurationWithAqwertianFingeringMusPlayFile_MusPlayNote:n];
  if ([((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(prev.length)) compareToWithId:((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).meter] > 0) {
    AqwertianFingeringMusPlayFile_MusPlayNote_Duration *carry = (AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) [((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(prev.length)) clone];
    [((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(carry)) subtractWithAqwertianFingeringMusPlayFile_MusPlayNote_Duration:((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).meter];
    AqwertianFingeringMusPlayFile_MusPlayNote *tmp = (AqwertianFingeringMusPlayFile_MusPlayNote *) [((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)) clone];
    [((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(tmp.length)) subtractWithAqwertianFingeringMusPlayFile_MusPlayNote_Duration:carry];
    [self outputNoteWithJavaIoPrintWriter:outArg withAqwertianFingeringMusPlayFile_MusPlayNote:tmp];
    [((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(prev.length)) subtractWithAqwertianFingeringMusPlayFile_MusPlayNote_Duration:carry];
    ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).measure++;
    [self outputBeatsWithJavaIoPrintWriter:outArg withAqwertianFingeringMusPlayFile_MusPlayNote:prev];
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) println];
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"MEASURE %d", ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(prev)).measure]];
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:AqwertianFingeringMusPlayFile_INDENT_];
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:@"CARRY"];
    [self outputDurationWithJavaIoPrintWriter:outArg withAqwertianFingeringMusPlayFile_MusPlayNote_Duration:carry];
    [self resetDurationWithAqwertianFingeringMusPlayFile_MusPlayNote:prev];
    [((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(prev.length)) addWithAqwertianFingeringMusPlayFile_MusPlayNote_Duration:carry];
  }
  else {
    [self outputNoteWithJavaIoPrintWriter:outArg withAqwertianFingeringMusPlayFile_MusPlayNote:n];
  }
  [self outputBeatsWithJavaIoPrintWriter:outArg withAqwertianFingeringMusPlayFile_MusPlayNote:prev];
}

- (void)outputNoteWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)n {
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:AqwertianFingeringMusPlayFile_INDENT_];
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:[self toMusPlayNoteWithInt:((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).note]];
  [self outputDurationWithJavaIoPrintWriter:outArg withAqwertianFingeringMusPlayFile_MusPlayNote_Duration:((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).length];
  if (((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).note != 0) {
    [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"  EXMATCH %c Q", ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).qwerty]];
    if (((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).reason != nil && [NIL_CHK(n.reason) length] != 0) [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithNSString:[NSString stringWithFormat:@"# %@", ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).reason]];
  }
}

- (void)outputDurationWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withAqwertianFingeringMusPlayFile_MusPlayNote_Duration:(AqwertianFingeringMusPlayFile_MusPlayNote_Duration *)d {
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:@" "];
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithInt:((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(d)).denom];
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:@" "];
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithInt:((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(d)).num];
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printWithNSString:@" "];
  [((JavaIoPrintWriter *) NIL_CHK(outArg)) printlnWithInt:((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(d)).divisor];
}

- (void)outputBeatsWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
withAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)prev {
}

- (NSString *)toMusPlayNoteWithInt:(int)note {
  if (note == 0) return @"REST";
  return [NSString stringWithFormat:@"%@ %d", [self calcMusPlayToneWithInt:note], [self calcMusPlayOctaveWithInt:note]];
}

- (NSString *)description {
  JavaLangStringBuffer *buff = [[JavaLangStringBuffer alloc] init];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _events_;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      AqwertianFingeringMusPlayFile_MusPlayNote * note = (AqwertianFingeringMusPlayFile_MusPlayNote *) [iter__ next];
      [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:[((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(note)) description]] appendWithUnichar:0x000a];
    }
  }
  return [((JavaLangStringBuffer *) NIL_CHK(buff)) description];
}

+ (void)initialize {
  if (self == [AqwertianFingeringMusPlayFile class]) {
    AqwertianFingeringMusPlayFile_TONE_ = [IOSObjectArray arrayWithObjects:(id[]){ @"C", @"C#", @"D", @"D#", @"E", @"F", @"F#", @"G", @"G#", @"A", @"A#", @"B" } count:12 type:[IOSClass classWithClass:[NSString class]]];
  }
}

@end


@implementation AqwertianFingeringMusPlayFile_MusPlayNote

- (AqwertianFingeringMusPlayFile_MusPlayNote_Duration *)meter {
  return meter_;
}

- (void)setMeter:(AqwertianFingeringMusPlayFile_MusPlayNote_Duration *)newMeter {
  meter_ = newMeter;
}

- (NSString *)key {
  return key_;
}

- (void)setKey:(NSString *)newKey {
  key_ = newKey;
}

- (NSString *)tempo {
  return tempo_;
}

- (void)setTempo:(NSString *)newTempo {
  tempo_ = newTempo;
}

- (int)measure {
  return measure_;
}

- (void)setMeasure:(int)newMeasure {
  measure_ = newMeasure;
}

- (NSString *)line {
  return line_;
}

- (void)setLine:(NSString *)newLine {
  line_ = newLine;
}

- (int)volume {
  return volume_;
}

- (void)setVolume:(int)newVolume {
  volume_ = newVolume;
}

- (AqwertianFingeringMusPlayFile_MusPlayNote_Duration *)length {
  return length_;
}

- (void)setLength:(AqwertianFingeringMusPlayFile_MusPlayNote_Duration *)newLength {
  length_ = newLength;
}

- (int)sequence {
  return sequence_;
}

- (void)setSequence:(int)newSequence {
  sequence_ = newSequence;
}


- (id)init {
  if ((self = [super initWithInt:0 withInt:0 withInt:0 withInt:0])) {
    meter_ = [[AqwertianFingeringMusPlayFile_MusPlayNote_Duration alloc] initWithBOOL:NO];
    key_ = @"";
    tempo_ = @"";
    measure_ = 1;
    line_ = @"";
    volume_ = 100;
    length_ = [[AqwertianFingeringMusPlayFile_MusPlayNote_Duration alloc] init];
  }
  return self;
}

- (id)initWithAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)previous {
  if ((self = [self init])) {
    if (previous != nil) {
      meter_ = (AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) [((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(previous.meter)) clone];
      key_ = previous.key;
      tempo_ = previous.tempo;
      measure_ = previous.measure;
      line_ = previous.line;
      volume_ = previous.volume;
      sequence_ = previous.sequence + 1;
    }
  }
  return self;
}

- (id)clone {
  @try {
    return (NSObject *) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    [((JavaLangCloneNotSupportedException *) NIL_CHK(e)) printStackTrace];
    return nil;
  }
}

- (NSString *)description {
  NSString *s = [NSString stringWithFormat:@"Measure %d/%@: ", measure_, line_];
  s = [NSString stringWithFormat:@"%@%@", s, [NSString stringWithFormat:@"%d %@", note_, [((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(length_)) description]]];
  return s;
}

- (int)compareToWithAqwertianFingeringMusicFile_Note:(AqwertianFingeringMusicFile_Note *)note {
  AqwertianFingeringMusPlayFile_MusPlayNote *n = (AqwertianFingeringMusPlayFile_MusPlayNote *) note;
  if (measure_ != ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure) return measure_ - ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).measure;
  int cmp = [NIL_CHK(line_) compareToWithId:((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).line];
  if (cmp != 0) return cmp;
  return sequence_ - ((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(n)).sequence;
}

- (void)addDurationWithAqwertianFingeringMusPlayFile_MusPlayNote:(AqwertianFingeringMusPlayFile_MusPlayNote *)toAdd {
  [((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(length_)) addWithAqwertianFingeringMusPlayFile_MusPlayNote_Duration:((AqwertianFingeringMusPlayFile_MusPlayNote *) NIL_CHK(toAdd)).length];
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

@end


@implementation AqwertianFingeringMusPlayFile_MusPlayNote_Duration

- (int)num {
  return num_;
}

- (void)setNum:(int)newNum {
  num_ = newNum;
}

- (int)denom {
  return denom_;
}

- (void)setDenom:(int)newDenom {
  denom_ = newDenom;
}

- (int)divisor {
  return divisor_;
}

- (void)setDivisor:(int)newDivisor {
  divisor_ = newDivisor;
}

- (BOOL)_reducable {
  return _reducable_;
}

- (void)set_reducable:(BOOL)new_reducable {
  _reducable_ = new_reducable;
}


- (id)init {
  if ((self = [super init])) {
    denom_ = 1;
    divisor_ = 1;
    _reducable_ = YES;
  }
  return self;
}

- (id)initWithBOOL:(BOOL)reducable {
  if ((self = [super init])) {
    denom_ = 1;
    divisor_ = 1;
    _reducable_ = YES;
    _reducable_ = reducable;
  }
  return self;
}

- (void)addWithAqwertianFingeringMusPlayFile_MusPlayNote_Duration:(AqwertianFingeringMusPlayFile_MusPlayNote_Duration *)toAdd {
  num_ = num_ * ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toAdd)).denom * ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toAdd)).divisor + ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toAdd)).num * denom_ * divisor_;
  denom_ = denom_ * ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toAdd)).denom;
  divisor_ = divisor_ * ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toAdd)).divisor;
  [self reduce];
}

- (void)subtractWithAqwertianFingeringMusPlayFile_MusPlayNote_Duration:(AqwertianFingeringMusPlayFile_MusPlayNote_Duration *)toSub {
  num_ = num_ * ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toSub)).denom * ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toSub)).divisor - ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toSub)).num * denom_ * divisor_;
  denom_ = denom_ * ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toSub)).denom;
  divisor_ = divisor_ * ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toSub)).divisor;
  [self reduce];
}

- (int)compareToWithId:(AqwertianFingeringMusPlayFile_MusPlayNote_Duration *)toComp {
  return num_ * ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toComp)).denom * ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toComp)).divisor - ((AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) NIL_CHK(toComp)).num * denom_ * divisor_;
}

- (BOOL)isEqual:(id)o {
  if ([o isKindOfClass:[AqwertianFingeringMusPlayFile_MusPlayNote_Duration class]]) return ([self compareToWithId:(AqwertianFingeringMusPlayFile_MusPlayNote_Duration *) o] == 0);
  return NO;
}

- (id)clone {
  @try {
    return (NSObject *) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    [((JavaLangCloneNotSupportedException *) NIL_CHK(e)) printStackTrace];
    return nil;
  }
}

- (void)reduce {
  if (!_reducable_) return;
  if (num_ % divisor_ == 0) {
    num_ /= divisor_;
    divisor_ = 1;
  }
  if (num_ % denom_ == 0) {
    num_ /= denom_;
    denom_ = 1;
  }
  while ((num_ % 2 == 0) && (denom_ % 2 == 0)) {
    num_ /= 2;
    denom_ /= 2;
  }
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%d %d %d", denom_, num_, divisor_];
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

@end


@implementation AqwertianFingeringMusPlayFile_Repeat

- (int)start {
  return start_;
}

- (void)setStart:(int)newStart {
  start_ = newStart;
}

- (int)end {
  return end_;
}

- (void)setEnd:(int)newEnd {
  end_ = newEnd;
}

- (int)repeat_at {
  return repeat_at_;
}

- (void)setRepeat_at:(int)newRepeat_at {
  repeat_at_ = newRepeat_at;
}


@end


