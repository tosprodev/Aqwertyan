//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nziebart/GoogleDrive/Aqwertian/QwertyMapper.java
//
//  Created by nziebart on 9/15/12.
//

#import "MapAlgorithm.h"
#import "MusicFile.h"
#import "PatternList.h"
#import "QwertyMapper.h"
#import "RandomAlgorithm.h"
#import "RoundRobinAlgorithm.h"
#import "UsageAlgorithm.h"
#import "IOSObjectArray.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/Integer.h"
#import "java/lang/NullPointerException.h"
#import "java/util/Collection.h"
#import "java/util/Iterator.h"
#import "java/util/LinkedList.h"
#import "java/util/Map.h"
#import "java/util/Random.h"
#import "java/util/Set.h"
#import "java/util/TreeMap.h"

@implementation AqwertianFingeringQwertyMapper

static IOSObjectArray * AqwertianFingeringQwertyMapper_FINGER_;

- (id<AqwertianFingeringMapAlgorithm>)_algo {
  return _algo_;
}

- (void)set_algo:(id<AqwertianFingeringMapAlgorithm>)new_algo {
  [_algo_ autorelease];
  _algo_ = [new_algo retain];
}

- (id<JavaUtilMap>)_noteHist {
  return _noteHist_;
}

- (void)set_noteHist:(id<JavaUtilMap>)new_noteHist {
  [_noteHist_ autorelease];
  _noteHist_ = [new_noteHist retain];
}

- (JavaUtilRandom *)rand {
  return rand_;
}

- (void)setRand:(JavaUtilRandom *)newRand {
  [rand_ autorelease];
  rand_ = [newRand retain];
}


+ (IOSObjectArray *)FINGER {
  return AqwertianFingeringQwertyMapper_FINGER_;
}

+ (unichar)FINGER_START {
  return AqwertianFingeringQwertyMapper_FINGER_START;
}

- (id)initWithAqwertianFingeringQwertyMapper_AlgorithmEnum:(AqwertianFingeringQwertyMapper_AlgorithmEnum *)algorithm
  withAqwertianFingeringQwertyMapper_LevelOfDifficultyEnum:(AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum *)level
                                        withJavaUtilRandom:(JavaUtilRandom *)rand {
  if ((self = [super init])) {
    _noteHist_ = [[JavaUtilTreeMap alloc] init];
    self.rand = rand;
    switch ([algorithm ordinal]) {
      case AqwertianFingeringQwertyMapper_Algorithm_RANDOM:
      _algo_ = [[AqwertianFingeringRandomAlgorithm alloc] initWithAqwertianFingeringQwertyMapper:self];
      break;
      case AqwertianFingeringQwertyMapper_Algorithm_ROUND_ROBIN:
      _algo_ = [[AqwertianFingeringRoundRobinAlgorithm alloc] initWithAqwertianFingeringQwertyMapper:self];
      break;
      case AqwertianFingeringQwertyMapper_Algorithm_USAGE:
      _algo_ = [[AqwertianFingeringUsageAlgorithm alloc] initWithAqwertianFingeringQwertyMapper:self withAqwertianFingeringQwertyMapper_LevelOfDifficultyEnum:level];
      break;
      default:
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Unrecognized algorithm: %@", algorithm]] autorelease];
    }
  }
  return self;
}

- (id)initWithAqwertianFingeringQwertyMapper_AlgorithmEnum:(AqwertianFingeringQwertyMapper_AlgorithmEnum *)algorithm
  withAqwertianFingeringQwertyMapper_LevelOfDifficultyEnum:(AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum *)level {
  return [self initWithAqwertianFingeringQwertyMapper_AlgorithmEnum:algorithm withAqwertianFingeringQwertyMapper_LevelOfDifficultyEnum:level withJavaUtilRandom:[[[JavaUtilRandom alloc] init] autorelease]];
}

- (NSString *)getInfo {
  return [((id<AqwertianFingeringMapAlgorithm>) NIL_CHK(_algo_)) getInfo];
}

- (void)mapWithJavaUtilCollection:(id<JavaUtilCollection>)notes
withAqwertianFingeringPatternList:(AqwertianFingeringPatternList *)patterns {
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) notes;
    if (!array__) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      AqwertianFingeringMusicFile_Note * n = (AqwertianFingeringMusicFile_Note *) [iter__ next];
      [self addToHistogramWithJavaUtilMap:_noteHist_ withNSString:[((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)) getNoteValue]];
    }
  }
  [((id<AqwertianFingeringMapAlgorithm>) NIL_CHK(_algo_)) mapWithJavaUtilCollection:notes withAqwertianFingeringPatternList:patterns withJavaUtilMap:_noteHist_];
}

+ (unichar)getHandWithInt:(int)qwerty {
  return [[((IOSObjectArray *) NIL_CHK(AqwertianFingeringQwertyMapper_FINGER_)) objectAtIndex:qwerty - AqwertianFingeringQwertyMapper_FINGER_START] charAtWithInt:0];
}

+ (NSString *)getFingerWithInt:(int)qwerty {
  return [[((IOSObjectArray *) NIL_CHK(AqwertianFingeringQwertyMapper_FINGER_)) objectAtIndex:qwerty - AqwertianFingeringQwertyMapper_FINGER_START] substring:0 endIndex:2];
}

+ (int)getRowWithInt:(int)qwerty {
  return [[((IOSObjectArray *) NIL_CHK(AqwertianFingeringQwertyMapper_FINGER_)) objectAtIndex:qwerty - AqwertianFingeringQwertyMapper_FINGER_START] charAtWithInt:2] - '0';
}

+ (unichar)getQwertyWithNSString:(NSString *)finger
                         withInt:(int)row {
  NSString *f = [NSString stringWithFormat:@"%@%d", finger, row];
  for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(AqwertianFingeringQwertyMapper_FINGER_)) count]; i++) if ([[((IOSObjectArray *) NIL_CHK(AqwertianFingeringQwertyMapper_FINGER_)) objectAtIndex:i] isEqual:f]) return (unichar) (i + AqwertianFingeringQwertyMapper_FINGER_START);
  return 0;
}

+ (unichar)getKeyWithInt:(int)index {
  return (unichar) (AqwertianFingeringQwertyMapper_FINGER_START + index);
}

+ (int)getIndexWithUnichar:(unichar)key {
  return (key - AqwertianFingeringQwertyMapper_FINGER_START);
}

- (AqwertianFingeringQwertyMapper_KeyHistory *)createKeyHistory {
  return [[[AqwertianFingeringQwertyMapper_KeyHistory alloc] init] autorelease];
}

- (BOOL)ruleFailsWithAqwertianFingeringQwertyMapper_KeyHistory:(AqwertianFingeringQwertyMapper_KeyHistory *)history
                          withAqwertianFingeringMusicFile_Note:(AqwertianFingeringMusicFile_Note *)currNote
                                                   withUnichar:(unichar)key {
  AqwertianFingeringMusicFile_Note *prevNote = [((AqwertianFingeringQwertyMapper_KeyHistory *) NIL_CHK(history)) getPrevious];
  if (prevNote == nil) return NO;
  if (((AqwertianFingeringMusicFile_Note *) NIL_CHK(prevNote)).qwerty == key && ((AqwertianFingeringMusicFile_Note *) NIL_CHK(prevNote)).note == ((AqwertianFingeringMusicFile_Note *) NIL_CHK(currNote)).note) return NO;
  NSString *prevFinger = [AqwertianFingeringQwertyMapper getFingerWithInt:((AqwertianFingeringMusicFile_Note *) NIL_CHK(prevNote)).qwerty];
  NSString *nextFinger = [AqwertianFingeringQwertyMapper getFingerWithInt:key];
  if ([self isImpossibleFingerWithNSString:prevFinger withNSString:nextFinger]) return YES;
  if ([((AqwertianFingeringQwertyMapper_KeyHistory *) NIL_CHK(history)) isFingerDownWithNSString:nextFinger]) return YES;
  return NO;
}

- (BOOL)isImpossibleFingerWithNSString:(NSString *)prevFinger
                          withNSString:(NSString *)nextFinger {
  if ([NIL_CHK(prevFinger) charAtWithInt:0] != [NIL_CHK(nextFinger) charAtWithInt:0]) return NO;
  if ([NIL_CHK(prevFinger) charAtWithInt:1] == [NIL_CHK(nextFinger) charAtWithInt:1]) return YES;
  switch ([NIL_CHK(prevFinger) charAtWithInt:1]) {
    case '1':
    return ([NIL_CHK(nextFinger) charAtWithInt:1] == '2');
    case '2':
    return ([NIL_CHK(nextFinger) charAtWithInt:1] == '1' || [NIL_CHK(nextFinger) charAtWithInt:1] == '3');
    case '3':
    return ([NIL_CHK(nextFinger) charAtWithInt:1] == '2' || [NIL_CHK(nextFinger) charAtWithInt:1] == '4');
    case '4':
    return ([NIL_CHK(nextFinger) charAtWithInt:1] == '3');
  }
  return NO;
}

- (NSString *)toStringWithAqwertianFingeringMusicFile_Note:(AqwertianFingeringMusicFile_Note *)n {
  NSString *s = [((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)) description];
  s = [NSString stringWithFormat:@"%@%@", s, [NSString stringWithFormat:@"(%d)", ((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)).note]];
  s = [NSString stringWithFormat:@"%@%@", s, [NSString stringWithFormat:@" - %c/%@ %d", ((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)).qwerty, [AqwertianFingeringQwertyMapper getFingerWithInt:((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)).qwerty], [AqwertianFingeringQwertyMapper getRowWithInt:((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)).qwerty]]];
  if (((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)).reason != nil) s = [NSString stringWithFormat:@"%@%@", s, [NSString stringWithFormat:@". Reason: %@", ((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)).reason]];
  return s;
}

- (void)addToHistogramWithJavaUtilMap:(id<JavaUtilMap>)hist
                         withNSString:(NSString *)key {
  int count = 0;
  if ([((id<JavaUtilMap>) NIL_CHK(hist)) containsKeyWithId:key]) count = [((JavaLangInteger *) [((id<JavaUtilMap>) NIL_CHK(hist)) getWithId:key]) intValue];
  count++;
  [((id<JavaUtilMap>) NIL_CHK(hist)) putWithId:key withId:[JavaLangInteger valueOfWithInt:count]];
}

- (void)printStatisticsWithJavaUtilCollection:(id<JavaUtilCollection>)notes {
  [self printHistogramWithJavaUtilMap:_noteHist_ withNSString:@"Histogram of Notes"];
  NSLog(@"");
  id<JavaUtilMap> qwertyHist = [[[JavaUtilTreeMap alloc] init] autorelease];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) notes;
    if (!array__) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      AqwertianFingeringMusicFile_Note * n = (AqwertianFingeringMusicFile_Note *) [iter__ next];
      [self addToHistogramWithJavaUtilMap:qwertyHist withNSString:[NSString valueOfChar:((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)).qwerty]];
    }
  }
  [self printHistogramWithJavaUtilMap:qwertyHist withNSString:@"Histogram of Key Usage"];
  NSLog(@"");
  qwertyHist = [[[JavaUtilTreeMap alloc] init] autorelease];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) notes;
    if (!array__) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      AqwertianFingeringMusicFile_Note * n = (AqwertianFingeringMusicFile_Note *) [iter__ next];
      [self addToHistogramWithJavaUtilMap:qwertyHist withNSString:[AqwertianFingeringQwertyMapper getFingerWithInt:((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)).qwerty]];
    }
  }
  [self printHistogramWithJavaUtilMap:qwertyHist withNSString:@"Histogram of Finger Usage"];
  NSLog(@"");
  qwertyHist = [[[JavaUtilTreeMap alloc] init] autorelease];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) notes;
    if (!array__) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      AqwertianFingeringMusicFile_Note * n = (AqwertianFingeringMusicFile_Note *) [iter__ next];
      [self addToHistogramWithJavaUtilMap:qwertyHist withNSString:[NSString valueOfInt:[AqwertianFingeringQwertyMapper getRowWithInt:((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)).qwerty]]];
    }
  }
  [self printHistogramWithJavaUtilMap:qwertyHist withNSString:@"Histogram of Row Usage"];
}

- (void)printHistogramWithJavaUtilMap:(id<JavaUtilMap>)hist
                         withNSString:(NSString *)title {
  NSLog(@"%@", title);
  int total = 0;
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) [((id<JavaUtilMap>) NIL_CHK(hist)) keySet];
    if (!array__) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      NSString * key = (NSString *) [iter__ next];
      int count = [((JavaLangInteger *) [((id<JavaUtilMap>) NIL_CHK(hist)) getWithId:key]) intValue];
      total += count;
      NSLog(@"%@", [NSString stringWithFormat:@"%@: %d", key, count]);
    }
  }
  NSLog(@"%@", [NSString stringWithFormat:@"%d bins, %d values.", [((id<JavaUtilMap>) NIL_CHK(hist)) size], total]);
}

+ (void)initialize {
  if (self == [AqwertianFingeringQwertyMapper class]) {
    AqwertianFingeringQwertyMapper_FINGER_ = [[IOSObjectArray arrayWithObjects:(id[]){ @"R00", @"", @"", @"", @"", @"", @"", @"", @"", @"", @"", @"", @"R21", @"", @"R31", @"R41", @"R44", @"L44", @"L34", @"L24", @"L14", @"L14", @"R14", @"R14", @"R24", @"R34", @"", @"R42", @"", @"", @"", @"", @"", @"L42", @"L11", @"L21", @"L22", @"L23", @"L12", @"L12", @"R12", @"R23", @"R12", @"R22", @"R32", @"R11", @"R11", @"R33", @"R43", @"L43", @"L13", @"L32", @"L13", @"R13", @"L11", @"L33", @"L31", @"R13", @"L41" } count:59 type:[IOSClass classWithClass:[NSString class]]] retain];
  }
}

- (void)dealloc {
  ([rand_ autorelease], rand_ = nil);
  ([_noteHist_ autorelease], _noteHist_ = nil);
  ([_algo_ autorelease], _algo_ = nil);
  [super dealloc];
}

@end


static AqwertianFingeringQwertyMapper_AlgorithmEnum *AqwertianFingeringQwertyMapper_AlgorithmEnum_RANDOM;
static AqwertianFingeringQwertyMapper_AlgorithmEnum *AqwertianFingeringQwertyMapper_AlgorithmEnum_ROUND_ROBIN;
static AqwertianFingeringQwertyMapper_AlgorithmEnum *AqwertianFingeringQwertyMapper_AlgorithmEnum_USAGE;
IOSObjectArray *AqwertianFingeringQwertyMapper_AlgorithmEnum_values;

@implementation AqwertianFingeringQwertyMapper_AlgorithmEnum

+ (AqwertianFingeringQwertyMapper_AlgorithmEnum *)RANDOM {
  return AqwertianFingeringQwertyMapper_AlgorithmEnum_RANDOM;
}
+ (AqwertianFingeringQwertyMapper_AlgorithmEnum *)ROUND_ROBIN {
  return AqwertianFingeringQwertyMapper_AlgorithmEnum_ROUND_ROBIN;
}
+ (AqwertianFingeringQwertyMapper_AlgorithmEnum *)USAGE {
  return AqwertianFingeringQwertyMapper_AlgorithmEnum_USAGE;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

+ (void)initialize {
  if (self == [AqwertianFingeringQwertyMapper_AlgorithmEnum class]) {
    AqwertianFingeringQwertyMapper_AlgorithmEnum_RANDOM = [[AqwertianFingeringQwertyMapper_AlgorithmEnum alloc] initWithNSString:@"AqwertianFingeringQwertyMapper_Algorithm_RANDOM" withInt:0];
    AqwertianFingeringQwertyMapper_AlgorithmEnum_ROUND_ROBIN = [[AqwertianFingeringQwertyMapper_AlgorithmEnum alloc] initWithNSString:@"AqwertianFingeringQwertyMapper_Algorithm_ROUND_ROBIN" withInt:1];
    AqwertianFingeringQwertyMapper_AlgorithmEnum_USAGE = [[AqwertianFingeringQwertyMapper_AlgorithmEnum alloc] initWithNSString:@"AqwertianFingeringQwertyMapper_Algorithm_USAGE" withInt:2];
    AqwertianFingeringQwertyMapper_AlgorithmEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ AqwertianFingeringQwertyMapper_AlgorithmEnum_RANDOM, AqwertianFingeringQwertyMapper_AlgorithmEnum_ROUND_ROBIN, AqwertianFingeringQwertyMapper_AlgorithmEnum_USAGE, nil } count:3 type:[IOSClass classWithClass:[AqwertianFingeringQwertyMapper_AlgorithmEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:AqwertianFingeringQwertyMapper_AlgorithmEnum_values];
}

+ (AqwertianFingeringQwertyMapper_AlgorithmEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [AqwertianFingeringQwertyMapper_AlgorithmEnum_values count]; i++) {
    AqwertianFingeringQwertyMapper_AlgorithmEnum *e = [AqwertianFingeringQwertyMapper_AlgorithmEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

@end
static AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum *AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_BEGINNER;
static AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum *AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_INTERMEDIATE;
static AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum *AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_ADVANCED;
static AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum *AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_EXPERT;
IOSObjectArray *AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_values;

@implementation AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum

+ (AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum *)BEGINNER {
  return AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_BEGINNER;
}
+ (AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum *)INTERMEDIATE {
  return AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_INTERMEDIATE;
}
+ (AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum *)ADVANCED {
  return AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_ADVANCED;
}
+ (AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum *)EXPERT {
  return AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_EXPERT;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

+ (void)initialize {
  if (self == [AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum class]) {
    AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_BEGINNER = [[AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum alloc] initWithNSString:@"AqwertianFingeringQwertyMapper_LevelOfDifficulty_BEGINNER" withInt:0];
    AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_INTERMEDIATE = [[AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum alloc] initWithNSString:@"AqwertianFingeringQwertyMapper_LevelOfDifficulty_INTERMEDIATE" withInt:1];
    AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_ADVANCED = [[AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum alloc] initWithNSString:@"AqwertianFingeringQwertyMapper_LevelOfDifficulty_ADVANCED" withInt:2];
    AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_EXPERT = [[AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum alloc] initWithNSString:@"AqwertianFingeringQwertyMapper_LevelOfDifficulty_EXPERT" withInt:3];
    AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_BEGINNER, AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_INTERMEDIATE, AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_ADVANCED, AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_EXPERT, nil } count:4 type:[IOSClass classWithClass:[AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_values];
}

+ (AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_values count]; i++) {
    AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum *e = [AqwertianFingeringQwertyMapper_LevelOfDifficultyEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

@end
@implementation AqwertianFingeringQwertyMapper_KeyHistory

- (JavaUtilLinkedList *)_mapped {
  return _mapped_;
}

- (void)set_mapped:(JavaUtilLinkedList *)new_mapped {
  [_mapped_ autorelease];
  _mapped_ = [new_mapped retain];
}

- (JavaUtilLinkedList *)_playing {
  return _playing_;
}

- (void)set_playing:(JavaUtilLinkedList *)new_playing {
  [_playing_ autorelease];
  _playing_ = [new_playing retain];
}


- (id)init {
  if ((self = [super init])) {
    _mapped_ = [[JavaUtilLinkedList alloc] init];
    _playing_ = [[JavaUtilLinkedList alloc] init];
  }
  return self;
}

- (void)addNoteWithAqwertianFingeringMusicFile_Note:(AqwertianFingeringMusicFile_Note *)n {
  [((JavaUtilLinkedList *) NIL_CHK(_mapped_)) addFirstWithId:n];
  if ([((JavaUtilLinkedList *) NIL_CHK(_mapped_)) size] > AqwertianFingeringQwertyMapper_USAGE_LIMIT) [((JavaUtilLinkedList *) NIL_CHK(_mapped_)) removeLast];
  int currTime = ((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)).time;
  for (id<JavaUtilIterator> it = ((id<JavaUtilIterator>) [((JavaUtilLinkedList *) NIL_CHK(_playing_)) iterator]); [((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]; ) {
    AqwertianFingeringMusicFile_Note *note = ((AqwertianFingeringMusicFile_Note *) [((id<JavaUtilIterator>) NIL_CHK(it)) next]);
    int noteOffTime = ((AqwertianFingeringMusicFile_Note *) NIL_CHK(note)).time + ((AqwertianFingeringMusicFile_Note *) NIL_CHK(note)).duration;
    if (noteOffTime <= currTime) [((id<JavaUtilIterator>) NIL_CHK(it)) remove];
  }
  [((JavaUtilLinkedList *) NIL_CHK(_playing_)) addLastWithId:n];
}

- (AqwertianFingeringMusicFile_Note *)getPrevious {
  if ([((JavaUtilLinkedList *) NIL_CHK(_mapped_)) size] == 0) return nil;
  return ((AqwertianFingeringMusicFile_Note *) [((JavaUtilLinkedList *) NIL_CHK(_mapped_)) getWithInt:0]);
}

- (AqwertianFingeringMusicFile_Note *)findMappedNoteWithAqwertianFingeringMusicFile_Note:(AqwertianFingeringMusicFile_Note *)n {
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _mapped_;
    if (!array__) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      AqwertianFingeringMusicFile_Note * used = (AqwertianFingeringMusicFile_Note *) [iter__ next];
      if (((AqwertianFingeringMusicFile_Note *) NIL_CHK(used)).note == ((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)).note) return used;
    }
  }
  return nil;
}

- (BOOL)isPlayingWithAqwertianFingeringMusicFile_Note:(AqwertianFingeringMusicFile_Note *)note {
  return [((JavaUtilLinkedList *) NIL_CHK(_playing_)) containsWithId:note];
}

- (BOOL)isFingerDownWithNSString:(NSString *)nextFinger {
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _playing_;
    if (!array__) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      AqwertianFingeringMusicFile_Note * n = (AqwertianFingeringMusicFile_Note *) [iter__ next];
      NSString *finger = [AqwertianFingeringQwertyMapper getFingerWithInt:((AqwertianFingeringMusicFile_Note *) NIL_CHK(n)).qwerty];
      if ([NIL_CHK(nextFinger) isEqual:finger]) return YES;
    }
  }
  return NO;
}

- (void)dealloc {
  ([_playing_ autorelease], _playing_ = nil);
  ([_mapped_ autorelease], _mapped_ = nil);
  [super dealloc];
}

@end


