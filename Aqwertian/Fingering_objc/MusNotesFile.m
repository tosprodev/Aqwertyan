//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nziebart/GoogleDrive/Aqwertian/MusNotesFile.java
//
//  Created by nziebart on 9/15/12.
//

#import "MusNotesFile.h"
#import "StringTokenizer.h"
#import "IOSObjectArray.h"
#import "java/io/BufferedReader.h"
#import "java/io/InputStream.h"
#import "java/io/InputStreamReader.h"
#import "java/io/OutputStream.h"
#import "java/io/PrintWriter.h"
#import "java/lang/Double.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/Integer.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/StringBuffer.h"
#import "java/util/ArrayList.h"
#import "java/util/Collection.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"

@implementation AqwertianFingeringMusNotesFile

- (id<JavaUtilList>)_elements {
  return _elements_;
}

- (void)set_elements:(id<JavaUtilList>)new_elements {
  [_elements_ autorelease];
  _elements_ = [new_elements retain];
}


- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  if ((self = [super init])) {
    _elements_ = [[JavaUtilArrayList alloc] init];
    JavaIoBufferedReader *bin = [[[JavaIoBufferedReader alloc] initWithJavaIoReader:[[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:inArg] autorelease]] autorelease];
    NSString *line;
    while ((line = [((JavaIoBufferedReader *) NIL_CHK(bin)) readLine]) != nil) {
      line = [NIL_CHK(line) trim];
      id<AqwertianFingeringMusNotesFile_MusElement> e = [AqwertianFingeringMusNotesFile_BasicElement createWithNSString:line];
      [((id<JavaUtilList>) NIL_CHK(_elements_)) addWithId:e];
    }
  }
  return self;
}

- (int)getChannelCount {
  return 1;
}

- (id<JavaUtilList>)extractNotesWithJavaUtilCollection:(id<JavaUtilCollection>)channels {
  id<JavaUtilList> musNotes = [[[JavaUtilArrayList alloc] init] autorelease];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _elements_;
    if (!array__) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      id<AqwertianFingeringMusNotesFile_MusElement> el = (id<AqwertianFingeringMusNotesFile_MusElement>) [iter__ next];
      if ([(id) el isKindOfClass:[AqwertianFingeringMusNotesFile_MusNote class]] && ![((AqwertianFingeringMusNotesFile_MusNote *) el) isTieNote]) [((id<JavaUtilList>) NIL_CHK(musNotes)) addWithId:(AqwertianFingeringMusNotesFile_MusNote *) el];
    }
  }
  id<JavaUtilList> notes = [[[JavaUtilArrayList alloc] init] autorelease];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) musNotes;
    if (!array__) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      AqwertianFingeringMusNotesFile_MusNote * n = (AqwertianFingeringMusNotesFile_MusNote *) [iter__ next];
      [((id<JavaUtilList>) NIL_CHK(notes)) addWithId:n];
    }
  }
  return notes;
}

- (void)storeWithJavaIoOutputStream:(JavaIoOutputStream *)o {
  if ([((id<JavaUtilList>) NIL_CHK(_elements_)) size] == 0) return;
  JavaIoPrintWriter *out = [[[JavaIoPrintWriter alloc] initWithJavaIoOutputStream:o] autorelease];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _elements_;
    if (!array__) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      id<AqwertianFingeringMusNotesFile_MusElement> el = (id<AqwertianFingeringMusNotesFile_MusElement>) [iter__ next];
      [((JavaIoPrintWriter *) NIL_CHK(out)) printlnWithNSString:[((id<AqwertianFingeringMusNotesFile_MusElement>) NIL_CHK(el)) getLine]];
    }
  }
  [((JavaIoPrintWriter *) NIL_CHK(out)) flush];
}

- (NSString *)description {
  JavaLangStringBuffer *buff = [[[JavaLangStringBuffer alloc] init] autorelease];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _elements_;
    if (!array__) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      id<AqwertianFingeringMusNotesFile_MusElement> el = (id<AqwertianFingeringMusNotesFile_MusElement>) [iter__ next];
      [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:[((id<AqwertianFingeringMusNotesFile_MusElement>) NIL_CHK(el)) getLine]] appendWithUnichar:0x000a];
    }
  }
  return [((JavaLangStringBuffer *) NIL_CHK(buff)) description];
}

- (void)dealloc {
  ([_elements_ autorelease], _elements_ = nil);
  [super dealloc];
}

@end


static AqwertianFingeringMusNotesFile_MusElement_TypeEnum *AqwertianFingeringMusNotesFile_MusElement_TypeEnum_PIECE;
static AqwertianFingeringMusNotesFile_MusElement_TypeEnum *AqwertianFingeringMusNotesFile_MusElement_TypeEnum_MEASURE;
static AqwertianFingeringMusNotesFile_MusElement_TypeEnum *AqwertianFingeringMusNotesFile_MusElement_TypeEnum_NOTE;
static AqwertianFingeringMusNotesFile_MusElement_TypeEnum *AqwertianFingeringMusNotesFile_MusElement_TypeEnum_MARK;
IOSObjectArray *AqwertianFingeringMusNotesFile_MusElement_TypeEnum_values;

@implementation AqwertianFingeringMusNotesFile_MusElement_TypeEnum

+ (AqwertianFingeringMusNotesFile_MusElement_TypeEnum *)PIECE {
  return AqwertianFingeringMusNotesFile_MusElement_TypeEnum_PIECE;
}
+ (AqwertianFingeringMusNotesFile_MusElement_TypeEnum *)MEASURE {
  return AqwertianFingeringMusNotesFile_MusElement_TypeEnum_MEASURE;
}
+ (AqwertianFingeringMusNotesFile_MusElement_TypeEnum *)NOTE {
  return AqwertianFingeringMusNotesFile_MusElement_TypeEnum_NOTE;
}
+ (AqwertianFingeringMusNotesFile_MusElement_TypeEnum *)MARK {
  return AqwertianFingeringMusNotesFile_MusElement_TypeEnum_MARK;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

- (NSString *)prefix {
  return prefix_;
}

- (void)setPrefix:(NSString *)newPrefix {
  [prefix_ autorelease];
  prefix_ = [newPrefix copy];
}


- (id)initWithNSString:(NSString *)prefix
          withNSString:(NSString *)name
               withInt:(int)ordinal {
  if ((self = [super initWithNSString:name withInt:ordinal])) {
    self.prefix = prefix;
  }
  return self;
}

- (NSString *)getPrefix {
  return prefix_;
}

+ (AqwertianFingeringMusNotesFile_MusElement_TypeEnum *)fromPrefixWithNSString:(NSString *)prefix {
  {
    int n__ = [[AqwertianFingeringMusNotesFile_MusElement_TypeEnum values] count];
    for (int i__ = 0; i__ < n__; i__++) {
      AqwertianFingeringMusNotesFile_MusElement_TypeEnum * t = [[AqwertianFingeringMusNotesFile_MusElement_TypeEnum values] objectAtIndex:i__];
      if ([[((AqwertianFingeringMusNotesFile_MusElement_TypeEnum *) NIL_CHK(t)) getPrefix] isEqual:prefix]) {
        return t;
      }
    }
  }
  return nil;
}

+ (void)initialize {
  if (self == [AqwertianFingeringMusNotesFile_MusElement_TypeEnum class]) {
    AqwertianFingeringMusNotesFile_MusElement_TypeEnum_PIECE = [[AqwertianFingeringMusNotesFile_MusElement_TypeEnum alloc] initWithNSString:@"P" withNSString:@"AqwertianFingeringMusNotesFile_MusElement_Type_PIECE" withInt:0];
    AqwertianFingeringMusNotesFile_MusElement_TypeEnum_MEASURE = [[AqwertianFingeringMusNotesFile_MusElement_TypeEnum alloc] initWithNSString:@"M" withNSString:@"AqwertianFingeringMusNotesFile_MusElement_Type_MEASURE" withInt:1];
    AqwertianFingeringMusNotesFile_MusElement_TypeEnum_NOTE = [[AqwertianFingeringMusNotesFile_MusElement_TypeEnum alloc] initWithNSString:@"N" withNSString:@"AqwertianFingeringMusNotesFile_MusElement_Type_NOTE" withInt:2];
    AqwertianFingeringMusNotesFile_MusElement_TypeEnum_MARK = [[AqwertianFingeringMusNotesFile_MusElement_TypeEnum alloc] initWithNSString:@"MARK" withNSString:@"AqwertianFingeringMusNotesFile_MusElement_Type_MARK" withInt:3];
    AqwertianFingeringMusNotesFile_MusElement_TypeEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ AqwertianFingeringMusNotesFile_MusElement_TypeEnum_PIECE, AqwertianFingeringMusNotesFile_MusElement_TypeEnum_MEASURE, AqwertianFingeringMusNotesFile_MusElement_TypeEnum_NOTE, AqwertianFingeringMusNotesFile_MusElement_TypeEnum_MARK, nil } count:4 type:[IOSClass classWithClass:[AqwertianFingeringMusNotesFile_MusElement_TypeEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:AqwertianFingeringMusNotesFile_MusElement_TypeEnum_values];
}

+ (AqwertianFingeringMusNotesFile_MusElement_TypeEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [AqwertianFingeringMusNotesFile_MusElement_TypeEnum_values count]; i++) {
    AqwertianFingeringMusNotesFile_MusElement_TypeEnum *e = [AqwertianFingeringMusNotesFile_MusElement_TypeEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

@end
@implementation AqwertianFingeringMusNotesFile_BasicElement

- (AqwertianFingeringMusNotesFile_MusElement_TypeEnum *)_type {
  return _type_;
}

- (void)set_type:(AqwertianFingeringMusNotesFile_MusElement_TypeEnum *)new_type {
  [_type_ autorelease];
  _type_ = [new_type retain];
}

- (id<JavaUtilList>)_words {
  return _words_;
}

- (void)set_words:(id<JavaUtilList>)new_words {
  [_words_ autorelease];
  _words_ = [new_words retain];
}


+ (id<AqwertianFingeringMusNotesFile_MusElement>)createWithNSString:(NSString *)line {
  if ([NIL_CHK(line) hasPrefix:[((AqwertianFingeringMusNotesFile_MusElement_TypeEnum *) NIL_CHK([AqwertianFingeringMusNotesFile_MusElement_TypeEnum NOTE])) getPrefix]]) return [[[AqwertianFingeringMusNotesFile_MusNote alloc] initWithNSString:line] autorelease];
  if ([NIL_CHK(line) hasPrefix:[((AqwertianFingeringMusNotesFile_MusElement_TypeEnum *) NIL_CHK([AqwertianFingeringMusNotesFile_MusElement_TypeEnum PIECE])) getPrefix]]) return [[[AqwertianFingeringMusNotesFile_MusPiece alloc] initWithNSString:line] autorelease];
  return [[[AqwertianFingeringMusNotesFile_BasicElement alloc] initWithNSString:line] autorelease];
}

- (id)initWithNSString:(NSString *)line {
  if ((self = [super init])) {
    ([_words_ autorelease], _words_ = [[AqwertianFingeringMusNotesFile_BasicElement parseLineWithNSString:line] retain]);
    ([_type_ autorelease], _type_ = [[AqwertianFingeringMusNotesFile_MusElement_TypeEnum fromPrefixWithNSString:((NSString *) [((id<JavaUtilList>) NIL_CHK(_words_)) getWithInt:0])] retain]);
    [((id<JavaUtilList>) NIL_CHK(_words_)) removeWithInt:0];
  }
  return self;
}

+ (id<JavaUtilList>)parseLineWithNSString:(NSString *)line {
  id<JavaUtilList> l = [[[JavaUtilArrayList alloc] init] autorelease];
  AqwertianFingeringUtilStringTokenizer *t = [[[AqwertianFingeringUtilStringTokenizer alloc] initWithNSString:line] autorelease];
  while ([((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) hasMoreTokens]) {
    NSString *word = [((AqwertianFingeringUtilStringTokenizer *) NIL_CHK(t)) nextToken];
    [((id<JavaUtilList>) NIL_CHK(l)) addWithId:word];
  }
  return l;
}

+ (NSString *)composeLineWithJavaUtilList:(id<JavaUtilList>)words {
  JavaLangStringBuffer *b = [[[JavaLangStringBuffer alloc] init] autorelease];
  for (id<JavaUtilIterator> it = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(words)) iterator]); [((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]; ) {
    NSString *word = ((NSString *) [((id<JavaUtilIterator>) NIL_CHK(it)) next]);
    [((JavaLangStringBuffer *) NIL_CHK(b)) appendWithNSString:word];
    if ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) [((JavaLangStringBuffer *) NIL_CHK(b)) appendWithUnichar:' '];
  }
  return [((JavaLangStringBuffer *) NIL_CHK(b)) description];
}

- (NSString *)getLine {
  return [NSString stringWithFormat:@"%@ %@", [[self getType] getPrefix], [AqwertianFingeringMusNotesFile_BasicElement composeLineWithJavaUtilList:_words_]];
}

- (AqwertianFingeringMusNotesFile_MusElement_TypeEnum *)getType {
  return _type_;
}

- (void)dealloc {
  ([_words_ autorelease], _words_ = nil);
  ([_type_ autorelease], _type_ = nil);
  [super dealloc];
}

@end


@implementation AqwertianFingeringMusNotesFile_MusPiece

- (id)initWithNSString:(NSString *)line {
  return [super initWithNSString:line];
}

@end


@implementation AqwertianFingeringMusNotesFile_MusNote

- (id<JavaUtilList>)_words {
  return _words_;
}

- (void)set_words:(id<JavaUtilList>)new_words {
  [_words_ autorelease];
  _words_ = [new_words retain];
}


- (id)initWithNSString:(NSString *)line {
  if ((self = [super initWithInt:0 withInt:0 withInt:0 withInt:0])) {
    ([_words_ autorelease], _words_ = [[AqwertianFingeringMusNotesFile_BasicElement parseLineWithNSString:line] retain]);
    double dtimeon = [JavaLangDouble parseDoubleWithNSString:((NSString *) [((id<JavaUtilList>) NIL_CHK(_words_)) getWithInt:6])];
    double dtimeoff = [JavaLangDouble parseDoubleWithNSString:((NSString *) [((id<JavaUtilList>) NIL_CHK(_words_)) getWithInt:7])];
    time_ = (int) (dtimeon * 1000);
    duration_ = (int) ((dtimeoff - dtimeon) * 1000);
    note_ = [JavaLangInteger parseIntWithNSString:((NSString *) [((id<JavaUtilList>) NIL_CHK(_words_)) getWithInt:3])];
    if (![@"NO" isEqual:((NSString *) [((id<JavaUtilList>) NIL_CHK(_words_)) getWithInt:18])] && [@"-100" isEqual:((NSString *) [((id<JavaUtilList>) NIL_CHK(_words_)) getWithInt:19])]) qwerty_ = [((NSString *) [((id<JavaUtilList>) NIL_CHK(_words_)) getWithInt:18]) charAtWithInt:0];
  }
  return self;
}

- (NSString *)getLine {
  [self adjustWords];
  NSString *s = [AqwertianFingeringMusNotesFile_BasicElement composeLineWithJavaUtilList:_words_];
  if (reason_ != nil && [NIL_CHK(reason_) length] != 0) s = [NSString stringWithFormat:@"%@%@", s, [NSString stringWithFormat:@" # %@", reason_]];
  return s;
}

- (AqwertianFingeringMusNotesFile_MusElement_TypeEnum *)getType {
  return [AqwertianFingeringMusNotesFile_MusElement_TypeEnum NOTE];
}

- (BOOL)isTieNote {
  NSString *line = ((NSString *) [((id<JavaUtilList>) NIL_CHK(_words_)) getWithInt:4]);
  return [NIL_CHK(line) hasPrefix:@"TL"];
}

- (void)adjustWords {
  if (qwerty_ != 0x0000) {
    [((id<JavaUtilList>) NIL_CHK(_words_)) setWithInt:18 withId:[NSString valueOfChar:qwerty_]];
    [((id<JavaUtilList>) NIL_CHK(_words_)) setWithInt:19 withId:@"-100"];
    [((id<JavaUtilList>) NIL_CHK(_words_)) setWithInt:20 withId:@"0"];
    if ([@"12345QWERTASDFGZXCVB" indexOf:qwerty_] >= 0) {
      NSString *l = ((NSString *) [((id<JavaUtilList>) NIL_CHK(_words_)) getWithInt:4]);
      l = [NSString stringWithFormat:@"'L'%@", [NIL_CHK(l) substring:1]];
      [((id<JavaUtilList>) NIL_CHK(_words_)) setWithInt:4 withId:l];
    }
  }
}

- (void)dealloc {
  ([_words_ autorelease], _words_ = nil);
  [super dealloc];
}

@end


