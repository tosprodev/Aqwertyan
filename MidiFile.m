//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nziebart/Documents/MusFingering/com/aqwertian/fingering/MidiFile.java
//
//  Created by nziebart on 10/23/12.
//

#import "IOSByteArray.h"
#import "IOSCharArray.h"
#import "MidiFile.h"
#import "MusicFile.h"
#import "java/io/IOException.h"
#import "java/io/InputStream.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/lang/Integer.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/StringBuffer.h"
#import "java/util/ArrayList.h"
#import "java/util/Collection.h"
#import "java/util/Collections.h"
#import "java/util/HashSet.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/Set.h"

@implementation ComAqwertianFingeringMidiFile

- (int)_format {
  return _format_;
}

- (void)set_format:(int)new_format {
  _format_ = new_format;
}

- (int)_numTracks {
  return _numTracks_;
}

- (void)set_numTracks:(int)new_numTracks {
  _numTracks_ = new_numTracks;
}

- (int)_division {
  return _division_;
}

- (void)set_division:(int)new_division {
  _division_ = new_division;
}

- (id<JavaUtilList>)_events {
  return _events_;
}

- (void)set_events:(id<JavaUtilList>)new_events {
  _events_ = new_events;
}


- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  if ((self = [super init])) {
    ComAqwertianFingeringMidiFile_MThdChunk *header = (ComAqwertianFingeringMidiFile_MThdChunk *) [self readChunkWithJavaIoInputStream:inArg];
    _format_ = ((ComAqwertianFingeringMidiFile_MThdChunk *) NIL_CHK(header)).format;
    _numTracks_ = ((ComAqwertianFingeringMidiFile_MThdChunk *) NIL_CHK(header)).numTracks;
    _division_ = ((ComAqwertianFingeringMidiFile_MThdChunk *) NIL_CHK(header)).division;
    _events_ = [[JavaUtilArrayList alloc] init];
    int lastTime = 0;
    for (int i = 0; i < ((ComAqwertianFingeringMidiFile_MThdChunk *) NIL_CHK(header)).numTracks; i++) {
      ComAqwertianFingeringMidiFile_Chunk *c = [self readChunkWithJavaIoInputStream:inArg];
      if (!([c isKindOfClass:[ComAqwertianFingeringMidiFile_MTrkChunk class]])) continue;
      ComAqwertianFingeringMidiFile_MTrkChunk *mc = (ComAqwertianFingeringMidiFile_MTrkChunk *) c;
      int start;
      if (((ComAqwertianFingeringMidiFile_MThdChunk *) NIL_CHK(header)).format == 1) start = 0;
      else start = lastTime;
      [self calcTimeWithJavaUtilList:((ComAqwertianFingeringMidiFile_MTrkChunk *) NIL_CHK(mc)).events withInt:start];
      [((id<JavaUtilList>) NIL_CHK(_events_)) addAllWithJavaUtilCollection:((ComAqwertianFingeringMidiFile_MTrkChunk *) NIL_CHK(mc)).events];
    }
    [JavaUtilCollections sortWithJavaUtilList:_events_];
  }
  return self;
}

- (int)getChannelCount {
  id<JavaUtilSet> channels = [[JavaUtilHashSet alloc] init];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _events_;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      ComAqwertianFingeringMidiFile_Event * e = (ComAqwertianFingeringMidiFile_Event *) [iter__ next];
      if ([((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)) isChannelEvent]) [((id<JavaUtilSet>) NIL_CHK(channels)) addWithId:[JavaLangInteger valueOfWithInt:[((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)) getChannel]]];
    }
  }
  return [((id<JavaUtilSet>) NIL_CHK(channels)) size];
}

- (id<JavaUtilList>)extractNotesWithJavaUtilCollection:(id<JavaUtilCollection>)channels {
  id<JavaUtilList> notes = [[JavaUtilArrayList alloc] init];
  for (int i = 0; i < [((id<JavaUtilList>) NIL_CHK(_events_)) size]; i++) {
    ComAqwertianFingeringMidiFile_Event *e = ((ComAqwertianFingeringMidiFile_Event *) [((id<JavaUtilList>) NIL_CHK(_events_)) getWithInt:i]);
    if (![self processChannelWithJavaUtilCollection:channels withComAqwertianFingeringMidiFile_Event:e]) continue;
    if ([((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)) isNoteOn]) {
      int channel = [((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)) getChannel];
      int note = [((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)) getNote];
      BOOL foundNoteOff = NO;
      for (int j = i + 1; j < [((id<JavaUtilList>) NIL_CHK(_events_)) size]; j++) {
        ComAqwertianFingeringMidiFile_Event *f = ((ComAqwertianFingeringMidiFile_Event *) [((id<JavaUtilList>) NIL_CHK(_events_)) getWithInt:j]);
        if (!((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(f)).visited && [((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(f)) isNoteOff] && channel == [((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(f)) getChannel] && note == [((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(f)) getNote]) {
          ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(f)).visited = YES;
          foundNoteOff = YES;
          [((id<JavaUtilList>) NIL_CHK(notes)) addWithId:[[ComAqwertianFingeringMusicFile_Note alloc] initWithInt:channel withInt:((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).time withInt:((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(f)).time - ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).time withInt:note withInt:[((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)) getVelocity]]];
          break;
        }
      }
      if (!foundNoteOff) [((id<JavaUtilList>) NIL_CHK(notes)) addWithId:[[ComAqwertianFingeringMusicFile_Note alloc] initWithInt:channel withInt:((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).time withInt:[self getDefaultDuration] withInt:note withInt:[((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)) getVelocity]]];
    }
  }
  for (int i = 0; i < [((id<JavaUtilList>) NIL_CHK(_events_)) size]; i++) {
    ComAqwertianFingeringMidiFile_Event *e = ((ComAqwertianFingeringMidiFile_Event *) [((id<JavaUtilList>) NIL_CHK(_events_)) getWithInt:i]);
    if ([self processChannelWithJavaUtilCollection:channels withComAqwertianFingeringMidiFile_Event:e] && [((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)) isNoteOff] && !((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).visited) NSLog(@"%@", [NSString stringWithFormat:@"!!!!!!!!!!! Note off at %d was not used: %@", i, e]);
  }
  return notes;
}

- (int)getDefaultDuration {
  if (_division_ >= 0) return _division_;
  return (_division_ & (int) 0xFF);
}

- (BOOL)processChannelWithJavaUtilCollection:(id<JavaUtilCollection>)channels
     withComAqwertianFingeringMidiFile_Event:(ComAqwertianFingeringMidiFile_Event *)e {
  if (![((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)) isNoteEvent]) return NO;
  if (channels == nil || [((id<JavaUtilCollection>) NIL_CHK(channels)) isEmpty]) return YES;
  return [((id<JavaUtilCollection>) NIL_CHK(channels)) containsWithId:[JavaLangInteger valueOfWithInt:[((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)) getChannel]]];
}

- (NSString *)description {
  JavaLangStringBuffer *buff = [[JavaLangStringBuffer alloc] init];
  [((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:[NSString stringWithFormat:@"fmt %d, ", _format_]];
  [((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:[NSString stringWithFormat:@"%d tracks, ", _numTracks_]];
  if (_division_ >= 0) [((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:[NSString stringWithFormat:@"%d ppqn", _division_]];
  else [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:[NSString stringWithFormat:@"fps: %d", -(_division_ >> 8)]] appendWithNSString:[NSString stringWithFormat:@" subframe: %d", (_division_ & (int) 0xFF)]];
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) _events_;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      ComAqwertianFingeringMidiFile_Event * e = (ComAqwertianFingeringMidiFile_Event *) [iter__ next];
      [((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:@"; "];
      [((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)) toStringWithJavaLangStringBuffer:buff];
    }
  }
  return [((JavaLangStringBuffer *) NIL_CHK(buff)) description];
}

- (void)calcTimeWithJavaUtilList:(id<JavaUtilList>)events
                         withInt:(int)start {
  int prev = start;
  {
    id<JavaLangIterable> array__ = (id<JavaLangIterable>) events;
    if (!array__) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    id<JavaUtilIterator> iter__ = [array__ iterator];
    while ([iter__ hasNext]) {
      ComAqwertianFingeringMidiFile_Event * e = (ComAqwertianFingeringMidiFile_Event *) [iter__ next];
      ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).time = prev + ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).deltaTime;
      prev = ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).time;
    }
  }
}

- (ComAqwertianFingeringMidiFile_Chunk *)readChunkWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  int val = [((JavaIoInputStream *) NIL_CHK(inArg)) read];
  if (val < 0) return nil;
  IOSCharArray *idb = [[IOSCharArray alloc] initWithLength:4];
  NSString *id_;
  int length;
  IOSByteArray *data;
  [((IOSCharArray *) NIL_CHK(idb)) replaceCharAtIndex:0 withChar:(unichar) val];
  [((IOSCharArray *) NIL_CHK(idb)) replaceCharAtIndex:1 withChar:(unichar) [self readWithJavaIoInputStream:inArg]];
  [((IOSCharArray *) NIL_CHK(idb)) replaceCharAtIndex:2 withChar:(unichar) [self readWithJavaIoInputStream:inArg]];
  [((IOSCharArray *) NIL_CHK(idb)) replaceCharAtIndex:3 withChar:(unichar) [self readWithJavaIoInputStream:inArg]];
  id_ = [NSString valueOfChars:idb];
  length = [self readWithJavaIoInputStream:inArg] << 24;
  length += [self readWithJavaIoInputStream:inArg] << 16;
  length += [self readWithJavaIoInputStream:inArg] << 8;
  length += [self readWithJavaIoInputStream:inArg];
  if (length < 0 || length > 10 * 1024 * 1024) @throw [[JavaIoIOException alloc] initWithNSString:[NSString stringWithFormat:@"Illegal chunk size: %d", length]];
  data = [[IOSByteArray alloc] initWithLength:length];
  [self readWithJavaIoInputStream:inArg withJavaLangByteArray:data withInt:(int) [((IOSByteArray *) NIL_CHK(data)) count]];
  if ([@"MThd" isEqual:id_]) return [[ComAqwertianFingeringMidiFile_MThdChunk alloc] initWithNSString:id_ withInt:length withJavaLangByteArray:data];
  if ([@"MTrk" isEqual:id_]) return [[ComAqwertianFingeringMidiFile_MTrkChunk alloc] initWithNSString:id_ withInt:length withJavaLangByteArray:data];
  return [[ComAqwertianFingeringMidiFile_GenericChunk alloc] initWithNSString:id_ withInt:length];
}

+ (ComAqwertianFingeringMidiFile_LengthInfo *)readVarLengthWithJavaLangByteArray:(IOSByteArray *)data
                                                                         withInt:(int)offset {
  int len = [((IOSByteArray *) NIL_CHK(data)) byteAtIndex:offset++];
  if ((len & (int) 0x80) != 0) {
    len &= (int) 0x7F;
    int val;
    do {
      val = [((IOSByteArray *) NIL_CHK(data)) byteAtIndex:offset++];
      len = (len << 7) + (val & (int) 0x7F);
    }
    while ((val & (int) 0x80) != 0);
  }
  return [[ComAqwertianFingeringMidiFile_LengthInfo alloc] initWithInt:len withInt:offset];
}

@end


@implementation ComAqwertianFingeringMidiFile_Chunk

- (NSString *)id_ {
  return id__;
}

- (void)setId_:(NSString *)newId_ {
  id__ = newId_;
}

- (int)length {
  return length_;
}

- (void)setLength:(int)newLength {
  length_ = newLength;
}


- (id)initWithNSString:(NSString *)id_
               withInt:(int)length {
  if ((self = [super init])) {
    self.id_ = id_;
    self.length = length;
  }
  return self;
}

@end


@implementation ComAqwertianFingeringMidiFile_GenericChunk

- (id)initWithNSString:(NSString *)id_
               withInt:(int)length {
  return [super initWithNSString:id_ withInt:length];
}

@end


@implementation ComAqwertianFingeringMidiFile_MThdChunk

- (int)format {
  return format_;
}

- (void)setFormat:(int)newFormat {
  format_ = newFormat;
}

- (int)numTracks {
  return numTracks_;
}

- (void)setNumTracks:(int)newNumTracks {
  numTracks_ = newNumTracks;
}

- (int)division {
  return division_;
}

- (void)setDivision:(int)newDivision {
  division_ = newDivision;
}


- (id)initWithNSString:(NSString *)id_
               withInt:(int)length
 withJavaLangByteArray:(IOSByteArray *)data {
  if ((self = [super initWithNSString:id_ withInt:length])) {
    format_ = ([((IOSByteArray *) NIL_CHK(data)) byteAtIndex:0] << 8) + [((IOSByteArray *) NIL_CHK(data)) byteAtIndex:1];
    numTracks_ = ([((IOSByteArray *) NIL_CHK(data)) byteAtIndex:2] << 8) + [((IOSByteArray *) NIL_CHK(data)) byteAtIndex:3];
    division_ = ([((IOSByteArray *) NIL_CHK(data)) byteAtIndex:4] << 8) + [((IOSByteArray *) NIL_CHK(data)) byteAtIndex:5];
  }
  return self;
}

@end


@implementation ComAqwertianFingeringMidiFile_MTrkChunk

- (id<JavaUtilList>)events {
  return events_;
}

- (void)setEvents:(id<JavaUtilList>)newEvents {
  events_ = newEvents;
}


- (id)initWithNSString:(NSString *)id_
               withInt:(int)length
 withJavaLangByteArray:(IOSByteArray *)data {
  if ((self = [super initWithNSString:id_ withInt:length])) {
    events_ = [[JavaUtilArrayList alloc] init];
    @try {
      [self parseChunkWithInt:length withJavaLangByteArray:data];
    }
    @catch (JavaLangIndexOutOfBoundsException *e) {
      @throw [[JavaIoIOException alloc] initWithNSString:@"Premature end of file reading MTrk"];
    }
  }
  return self;
}

- (void)parseChunkWithInt:(int)len
    withJavaLangByteArray:(IOSByteArray *)data {
  int offset = 0;
  char lastStatus = 0;
  while (offset < len) {
    ComAqwertianFingeringMidiFile_LengthInfo *info = [ComAqwertianFingeringMidiFile readVarLengthWithJavaLangByteArray:data withInt:offset];
    offset = ((ComAqwertianFingeringMidiFile_LengthInfo *) NIL_CHK(info)).offset;
    ComAqwertianFingeringMidiFile_Event *e = [[ComAqwertianFingeringMidiFile_Event alloc] init];
    ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).deltaTime = ((ComAqwertianFingeringMidiFile_LengthInfo *) NIL_CHK(info)).length;
    if (([((IOSByteArray *) NIL_CHK(data)) byteAtIndex:offset] & (char) (int) 0x80) != 0) ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).status = [((IOSByteArray *) NIL_CHK(data)) byteAtIndex:offset++];
    else ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).status = lastStatus;
    lastStatus = ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).status;
    if (((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).status == (char) (int) 0xFF) offset = [self parseMetaEventWithComAqwertianFingeringMidiFile_Event:e withJavaLangByteArray:data withInt:offset];
    else {
      ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).data = [[IOSByteArray alloc] initWithLength:[self dataLengthWithChar:((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).status]];
      for (int i = 0; i < (int) [((IOSByteArray *) NIL_CHK(e.data)) count]; i++) [((IOSByteArray *) NIL_CHK(e.data)) replaceByteAtIndex:i withByte:[((IOSByteArray *) NIL_CHK(data)) byteAtIndex:offset++]];
    }
    [((id<JavaUtilList>) NIL_CHK(events_)) addWithId:e];
  }
}

- (int)dataLengthWithChar:(char)status {
  switch (status & (char) (int) 0xF0) {
    case (char) (int) 0x80:
    case (char) (int) 0x90:
    case (char) (int) 0xA0:
    case (char) (int) 0xB0:
    case (char) (int) 0xE0:
    return 2;
    case (char) (int) 0xC0:
    case (char) (int) 0xD0:
    return 1;
    case (char) (int) 0xF0:
    if (status == (char) (int) 0xF1 || status == (char) (int) 0xF3) return 1;
    if (status == (char) (int) 0xF2) return 2;
  }
  return 0;
}

- (int)parseMetaEventWithComAqwertianFingeringMidiFile_Event:(ComAqwertianFingeringMidiFile_Event *)e
                                       withJavaLangByteArray:(IOSByteArray *)data
                                                     withInt:(int)offset {
  char type = [((IOSByteArray *) NIL_CHK(data)) byteAtIndex:offset++];
  ComAqwertianFingeringMidiFile_LengthInfo *info = [ComAqwertianFingeringMidiFile readVarLengthWithJavaLangByteArray:data withInt:offset];
  offset = ((ComAqwertianFingeringMidiFile_LengthInfo *) NIL_CHK(info)).offset;
  ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).data = [[IOSByteArray alloc] initWithLength:((ComAqwertianFingeringMidiFile_LengthInfo *) NIL_CHK(info)).length + 1];
  [((IOSByteArray *) NIL_CHK(e.data)) replaceByteAtIndex:0 withByte:type];
  for (int i = 1; i < (int) [((IOSByteArray *) NIL_CHK(e.data)) count]; i++) [((IOSByteArray *) NIL_CHK(e.data)) replaceByteAtIndex:i withByte:[((IOSByteArray *) NIL_CHK(data)) byteAtIndex:offset++]];
  return offset;
}

@end


@implementation ComAqwertianFingeringMidiFile_Event

- (int)deltaTime {
  return deltaTime_;
}

- (void)setDeltaTime:(int)newDeltaTime {
  deltaTime_ = newDeltaTime;
}

- (int)time {
  return time_;
}

- (void)setTime:(int)newTime {
  time_ = newTime;
}

- (char)status {
  return status_;
}

- (void)setStatus:(char)newStatus {
  status_ = newStatus;
}

- (IOSByteArray *)data {
  return data_;
}

- (void)setData:(IOSByteArray *)newData {
  data_ = newData;
}

- (BOOL)visited {
  return visited_;
}

- (void)setVisited:(BOOL)newVisited {
  visited_ = newVisited;
}


- (BOOL)isChannelEvent {
  char st = (char) (status_ & (int) 0xF0);
  return (st == (char) (int) 0x80 || st == (char) (int) 0x90 || st == (char) (int) 0xA0 || st == (char) (int) 0xB0 || st == (char) (int) 0xC0 || st == (char) (int) 0xD0 || st == (char) (int) 0xE0);
}

- (BOOL)isNoteEvent {
  char st = (char) (status_ & (int) 0xF0);
  return (st == (char) (int) 0x80 || st == (char) (int) 0x90);
}

- (BOOL)isNoteOn {
  return ((char) (status_ & (int) 0xF0) == (char) (int) 0x90);
}

- (BOOL)isNoteOff {
  return ((char) (status_ & (int) 0xF0) == (char) (int) 0x80);
}

- (int)getChannel {
  return (status_ & (int) 0x0F);
}

- (int)getNote {
  return [((IOSByteArray *) NIL_CHK(data_)) byteAtIndex:0];
}

- (int)getVelocity {
  return [((IOSByteArray *) NIL_CHK(data_)) byteAtIndex:1];
}

- (BOOL)isEqual:(id)obj {
  if ([obj isKindOfClass:[ComAqwertianFingeringMidiFile_Event class]]) {
    ComAqwertianFingeringMidiFile_Event *e = (ComAqwertianFingeringMidiFile_Event *) obj;
    if (time_ != ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).time || status_ != ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).status || (int) [((IOSByteArray *) NIL_CHK(data_)) count] != (int) [((IOSByteArray *) NIL_CHK(e.data)) count]) return NO;
    for (int i = 0; i < (int) [((IOSByteArray *) NIL_CHK(data_)) count]; i++) if ([((IOSByteArray *) NIL_CHK(data_)) byteAtIndex:i] != [((IOSByteArray *) NIL_CHK(e.data)) byteAtIndex:i]) return NO;
    return YES;
  }
  return NO;
}

- (int)compareToWithId:(ComAqwertianFingeringMidiFile_Event *)e {
  if (time_ != ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).time) return time_ - ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).time;
  if (status_ != ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).status) return status_ - ((ComAqwertianFingeringMidiFile_Event *) NIL_CHK(e)).status;
  for (int i = 0; i < (int) [((IOSByteArray *) NIL_CHK(data_)) count]; i++) {
    if (i >= (int) [((IOSByteArray *) NIL_CHK(e.data)) count]) break;
    if ([((IOSByteArray *) NIL_CHK(data_)) byteAtIndex:i] != [((IOSByteArray *) NIL_CHK(e.data)) byteAtIndex:i]) return [((IOSByteArray *) NIL_CHK(data_)) byteAtIndex:i] - [((IOSByteArray *) NIL_CHK(e.data)) byteAtIndex:i];
  }
  return (int) [((IOSByteArray *) NIL_CHK(data_)) count] - (int) [((IOSByteArray *) NIL_CHK(e.data)) count];
}

- (NSString *)description {
  JavaLangStringBuffer *buff = [[JavaLangStringBuffer alloc] initWithInt:20];
  [self toStringWithJavaLangStringBuffer:buff];
  return [((JavaLangStringBuffer *) NIL_CHK(buff)) description];
}

- (void)toStringWithJavaLangStringBuffer:(JavaLangStringBuffer *)buff {
  [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:@"t: "] appendWithInt:time_];
  [((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:@", s: "];
  if (status_ == -1) {
    switch ([((IOSByteArray *) NIL_CHK(data_)) byteAtIndex:0]) {
      case 0:
      [((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:@"SQ"];
      break;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      [[[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithInt:[((IOSByteArray *) NIL_CHK(data_)) byteAtIndex:0]] appendWithUnichar:':'] appendWithNSString:[NSString stringWithBytes:data_ offset:1 length:(int) [((IOSByteArray *) NIL_CHK(data_)) count] - 1]];
      break;
      case (char) (int) 0x2F:
      [((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:@"XX"];
      break;
      default:
      [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithInt:[((IOSByteArray *) NIL_CHK(data_)) byteAtIndex:0]] appendWithUnichar:':'];
      for (int i = 1; i < (int) [((IOSByteArray *) NIL_CHK(data_)) count]; i++) [((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:[JavaLangInteger toHexStringWithInt:[((IOSByteArray *) NIL_CHK(data_)) byteAtIndex:i]]];
      break;
    }
  }
  else {
    char stat = (char) (status_ & (int) 0xF0);
    switch (stat) {
      case (char) (int) 0x80:
      [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:@"UP"] appendWithInt:[self getChannel]];
      break;
      case (char) (int) 0x90:
      [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:@"DN"] appendWithInt:[self getChannel]];
      break;
      case (char) (int) 0xA0:
      [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:@"AT"] appendWithInt:[self getChannel]];
      break;
      case (char) (int) 0xB0:
      [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:@"CT"] appendWithInt:[self getChannel]];
      break;
      case (char) (int) 0xC0:
      [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:@"PC"] appendWithInt:[self getChannel]];
      break;
      case (char) (int) 0xD0:
      [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:@"PR"] appendWithInt:[self getChannel]];
      break;
      case (char) (int) 0xE0:
      [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:@"WH"] appendWithInt:[self getChannel]];
      break;
      default:
      [((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:[[JavaLangInteger toHexStringWithInt:status_] substring:6]];
    }
    for (int i = 0; i < (int) [((IOSByteArray *) NIL_CHK(data_)) count]; i++) [[((JavaLangStringBuffer *) NIL_CHK(buff)) appendWithNSString:@" "] appendWithInt:[((IOSByteArray *) NIL_CHK(data_)) byteAtIndex:i]];
  }
}

@end


@implementation ComAqwertianFingeringMidiFile_LengthInfo

- (int)length {
  return length_;
}

- (void)setLength:(int)newLength {
  length_ = newLength;
}

- (int)offset {
  return offset_;
}

- (void)setOffset:(int)newOffset {
  offset_ = newOffset;
}


- (id)initWithInt:(int)length
          withInt:(int)offset {
  if ((self = [super init])) {
    self.length = length;
    self.offset = offset;
  }
  return self;
}

@end


