//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nziebart/GoogleDrive/Aqwertian/Aqwertian/fingering/MusicFile.java
//
//  Created by nziebart on 9/17/12.
//

#import "IOSByteArray.h"
#import "IOSObjectArray.h"
#import "MusicFile.h"
#import "java/io/IOException.h"
#import "java/io/InputStream.h"
#import "java/io/OutputStream.h"
#import "java/lang/Integer.h"
#import "java/util/Collection.h"
#import "java/util/Collections.h"
#import "java/util/HashMap.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/Map.h"

@implementation MusicFile

- (id<JavaUtilMap>)_notes {
  return _notes_;
}

- (void)set_notes:(id<JavaUtilMap>)new_notes {
  [_notes_ autorelease];
  _notes_ = [new_notes retain];
}


- (id)init {
  if ((self = [super init])) {
    _notes_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (int)getChannelCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilList>)getNotesWithJavaUtilCollection:(id<JavaUtilCollection>)channels {
  if (((id<JavaUtilList>) [((id<JavaUtilMap>) NIL_CHK(_notes_)) getWithId:channels]) == nil) {
    id<JavaUtilList> notes = [self extractNotesWithJavaUtilCollection:channels];
    [self sortNotesWithJavaUtilList:notes];
    [((id<JavaUtilMap>) NIL_CHK(_notes_)) putWithId:channels withId:notes];
  }
  return (id<JavaUtilList>) ((id<JavaUtilList>) [((id<JavaUtilMap>) NIL_CHK(_notes_)) getWithId:channels]);
}

- (void)sortNotesWithJavaUtilList:(id<JavaUtilList>)notes {
  [JavaUtilCollections sortWithJavaUtilList:notes];
  MusicFile_Note *prev = nil;
  for (id<JavaUtilIterator> it = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(notes)) iterator]); [((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]; ) {
    MusicFile_Note *n = ((MusicFile_Note *) [((id<JavaUtilIterator>) NIL_CHK(it)) next]);
    if ([self sameNoteWithMusicFile_Note:prev withMusicFile_Note:n]) {
      [((id<JavaUtilIterator>) NIL_CHK(it)) remove];
    }
    prev = n;
  }
}

- (BOOL)sameNoteWithMusicFile_Note:(MusicFile_Note *)n1
                withMusicFile_Note:(MusicFile_Note *)n2 {
  if (n1 == nil && n2 != nil || n1 != nil && n2 == nil) {
    return NO;
  }
  if (n1 == nil && n2 == nil) {
    return YES;
  }
  return ((MusicFile_Note *) NIL_CHK(n1)).note == ((MusicFile_Note *) NIL_CHK(n2)).note && ((MusicFile_Note *) NIL_CHK(n1)).duration == ((MusicFile_Note *) NIL_CHK(n2)).duration && ((MusicFile_Note *) NIL_CHK(n1)).time == ((MusicFile_Note *) NIL_CHK(n2)).time;
}

- (void)storeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
}

- (id<JavaUtilList>)extractNotesWithJavaUtilCollection:(id<JavaUtilCollection>)channels {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)readWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  int val = [((JavaIoInputStream *) NIL_CHK(inArg)) read];
  if (val < 0) @throw [[[JavaIoIOException alloc] initWithNSString:@"Premature end of file."] autorelease];
  return val;
}

- (void)readWithJavaIoInputStream:(JavaIoInputStream *)inArg
            withJavaLangByteArray:(IOSByteArray *)buff
                          withInt:(int)length {
  int val = [((JavaIoInputStream *) NIL_CHK(inArg)) readWithJavaLangByteArray:buff withInt:0 withInt:length];
  if (val != length) @throw [[[JavaIoIOException alloc] initWithNSString:[NSString stringWithFormat:@"Premature end of file. Expected: %d; read: %d", length, val]] autorelease];
}

- (void)dealloc {
  ([_notes_ autorelease], _notes_ = nil);
  [super dealloc];
}

@end


@implementation MusicFile_Note

static IOSObjectArray * MusicFile_Note_NOTES_;

- (int)channel {
  return channel_;
}

- (void)setChannel:(int)newChannel {
  channel_ = newChannel;
}

- (int)time {
  return time_;
}

- (void)setTime:(int)newTime {
  time_ = newTime;
}

- (int)duration {
  return duration_;
}

- (void)setDuration:(int)newDuration {
  duration_ = newDuration;
}

- (int)note {
  return note_;
}

- (void)setNote:(int)newNote {
  note_ = newNote;
}

- (unichar)qwerty {
  return qwerty_;
}

- (void)setQwerty:(unichar)newQwerty {
  qwerty_ = newQwerty;
}

- (NSString *)reason {
  return reason_;
}

- (void)setReason:(NSString *)newReason {
  [reason_ autorelease];
  reason_ = [newReason copy];
}


- (id)initWithInt:(int)channel
          withInt:(int)time
          withInt:(int)duration
          withInt:(int)note {
  if ((self = [super init])) {
    self.channel = channel;
    self.time = time;
    self.duration = duration;
    self.note = note;
  }
  return self;
}

+ (IOSObjectArray *)NOTES {
  return MusicFile_Note_NOTES_;
}

- (NSString *)getNoteName {
  return [MusicFile_Note getNoteNameWithInt:note_];
}

+ (NSString *)getNoteNameWithInt:(int)note {
  return [((IOSObjectArray *) NIL_CHK(MusicFile_Note_NOTES_)) objectAtIndex:note % 12];
}

- (int)getOctave {
  return [MusicFile_Note getOctaveWithInt:note_];
}

+ (int)getOctaveWithInt:(int)note {
  return note / 12;
}

- (NSString *)getNoteValue {
  return [MusicFile_Note getNoteValueWithInt:note_];
}

+ (NSString *)getNoteValueWithInt:(int)note {
  return [NSString stringWithFormat:@"%d%@", [MusicFile_Note getOctaveWithInt:note], [MusicFile_Note getNoteNameWithInt:note]];
}

- (int)compareToWithId:(MusicFile_Note *)n {
  int ret = time_ - ((MusicFile_Note *) NIL_CHK(n)).time;
  if (ret != 0) return ret;
  ret = duration_ - ((MusicFile_Note *) NIL_CHK(n)).duration;
  if (ret != 0) return ret;
  return note_ - ((MusicFile_Note *) NIL_CHK(n)).note;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"+:%@", [self getNoteValue]];
}

+ (void)initialize {
  if (self == [MusicFile_Note class]) {
    MusicFile_Note_NOTES_ = [[IOSObjectArray arrayWithObjects:(id[]){ @"C ", @"C#", @"D ", @"D#", @"E ", @"F ", @"F#", @"G ", @"G#", @"A ", @"A#", @"B " } count:12 type:[IOSClass classWithClass:[NSString class]]] retain];
  }
}

- (void)dealloc {
  ([reason_ autorelease], reason_ = nil);
  [super dealloc];
}

@end


